
TrafficLights.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001950  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000038  00800060  00001950  000019e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000046  00800098  00800098  00001a1c  2**0
                  ALLOC
  3 .stab         00002940  00000000  00000000  00001a1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001920  00000000  00000000  0000435c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 b9 08 	jmp	0x1172	; 0x1172 <__vector_10>
      2c:	0c 94 f1 08 	jmp	0x11e2	; 0x11e2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e5       	ldi	r30, 0x50	; 80
      68:	f9 e1       	ldi	r31, 0x19	; 25
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 39       	cpi	r26, 0x98	; 152
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e9       	ldi	r26, 0x98	; 152
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3d       	cpi	r26, 0xDE	; 222
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 32 09 	call	0x1264	; 0x1264 <main>
      8a:	0c 94 a6 0c 	jmp	0x194c	; 0x194c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <Switch_enuInit>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <Switch_enuInit+0x6>
      98:	00 d0       	rcall	.+0      	; 0x9a <Switch_enuInit+0x8>
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	81 e0       	ldi	r24, 0x01	; 1
      a0:	8a 83       	std	Y+2, r24	; 0x02
      a2:	51 c0       	rjmp	.+162    	; 0x146 <Switch_enuInit+0xb4>
      a4:	89 81       	ldd	r24, Y+1	; 0x01
      a6:	28 2f       	mov	r18, r24
      a8:	30 e0       	ldi	r19, 0x00	; 0
      aa:	c9 01       	movw	r24, r18
      ac:	88 0f       	add	r24, r24
      ae:	99 1f       	adc	r25, r25
      b0:	82 0f       	add	r24, r18
      b2:	93 1f       	adc	r25, r19
      b4:	fc 01       	movw	r30, r24
      b6:	ef 59       	subi	r30, 0x9F	; 159
      b8:	ff 4f       	sbci	r31, 0xFF	; 255
      ba:	40 81       	ld	r20, Z
      bc:	89 81       	ldd	r24, Y+1	; 0x01
      be:	28 2f       	mov	r18, r24
      c0:	30 e0       	ldi	r19, 0x00	; 0
      c2:	c9 01       	movw	r24, r18
      c4:	88 0f       	add	r24, r24
      c6:	99 1f       	adc	r25, r25
      c8:	82 0f       	add	r24, r18
      ca:	93 1f       	adc	r25, r19
      cc:	fc 01       	movw	r30, r24
      ce:	ee 59       	subi	r30, 0x9E	; 158
      d0:	ff 4f       	sbci	r31, 0xFF	; 255
      d2:	90 81       	ld	r25, Z
      d4:	84 2f       	mov	r24, r20
      d6:	69 2f       	mov	r22, r25
      d8:	40 e0       	ldi	r20, 0x00	; 0
      da:	0e 94 0d 04 	call	0x81a	; 0x81a <DIO_enuSetPinDirection>
      de:	8b 83       	std	Y+3, r24	; 0x03
      e0:	89 81       	ldd	r24, Y+1	; 0x01
      e2:	28 2f       	mov	r18, r24
      e4:	30 e0       	ldi	r19, 0x00	; 0
      e6:	c9 01       	movw	r24, r18
      e8:	88 0f       	add	r24, r24
      ea:	99 1f       	adc	r25, r25
      ec:	82 0f       	add	r24, r18
      ee:	93 1f       	adc	r25, r19
      f0:	fc 01       	movw	r30, r24
      f2:	ef 59       	subi	r30, 0x9F	; 159
      f4:	ff 4f       	sbci	r31, 0xFF	; 255
      f6:	50 81       	ld	r21, Z
      f8:	89 81       	ldd	r24, Y+1	; 0x01
      fa:	28 2f       	mov	r18, r24
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	c9 01       	movw	r24, r18
     100:	88 0f       	add	r24, r24
     102:	99 1f       	adc	r25, r25
     104:	82 0f       	add	r24, r18
     106:	93 1f       	adc	r25, r19
     108:	fc 01       	movw	r30, r24
     10a:	ee 59       	subi	r30, 0x9E	; 158
     10c:	ff 4f       	sbci	r31, 0xFF	; 255
     10e:	40 81       	ld	r20, Z
     110:	89 81       	ldd	r24, Y+1	; 0x01
     112:	28 2f       	mov	r18, r24
     114:	30 e0       	ldi	r19, 0x00	; 0
     116:	c9 01       	movw	r24, r18
     118:	88 0f       	add	r24, r24
     11a:	99 1f       	adc	r25, r25
     11c:	82 0f       	add	r24, r18
     11e:	93 1f       	adc	r25, r19
     120:	fc 01       	movw	r30, r24
     122:	ed 59       	subi	r30, 0x9D	; 157
     124:	ff 4f       	sbci	r31, 0xFF	; 255
     126:	90 81       	ld	r25, Z
     128:	85 2f       	mov	r24, r21
     12a:	64 2f       	mov	r22, r20
     12c:	49 2f       	mov	r20, r25
     12e:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <DIO_enuSetPinValue>
     132:	8c 83       	std	Y+4, r24	; 0x04
     134:	8b 81       	ldd	r24, Y+3	; 0x03
     136:	88 23       	and	r24, r24
     138:	61 f4       	brne	.+24     	; 0x152 <Switch_enuInit+0xc0>
     13a:	8c 81       	ldd	r24, Y+4	; 0x04
     13c:	88 23       	and	r24, r24
     13e:	49 f4       	brne	.+18     	; 0x152 <Switch_enuInit+0xc0>
     140:	89 81       	ldd	r24, Y+1	; 0x01
     142:	8f 5f       	subi	r24, 0xFF	; 255
     144:	89 83       	std	Y+1, r24	; 0x01
     146:	90 91 60 00 	lds	r25, 0x0060
     14a:	89 81       	ldd	r24, Y+1	; 0x01
     14c:	89 17       	cp	r24, r25
     14e:	08 f4       	brcc	.+2      	; 0x152 <Switch_enuInit+0xc0>
     150:	a9 cf       	rjmp	.-174    	; 0xa4 <Switch_enuInit+0x12>
     152:	8b 81       	ldd	r24, Y+3	; 0x03
     154:	88 23       	and	r24, r24
     156:	21 f4       	brne	.+8      	; 0x160 <Switch_enuInit+0xce>
     158:	8c 81       	ldd	r24, Y+4	; 0x04
     15a:	88 23       	and	r24, r24
     15c:	09 f4       	brne	.+2      	; 0x160 <Switch_enuInit+0xce>
     15e:	1a 82       	std	Y+2, r1	; 0x02
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	0f 90       	pop	r0
     164:	0f 90       	pop	r0
     166:	0f 90       	pop	r0
     168:	0f 90       	pop	r0
     16a:	cf 91       	pop	r28
     16c:	df 91       	pop	r29
     16e:	08 95       	ret

00000170 <Switch_enuGetPressed>:

	return Local_enuErrorState ;
}

ES_t Switch_enuGetPressed (u8 Copy_u8SwitchNum ,u8 *Copy_pu8SwitchValue)
{
     170:	df 93       	push	r29
     172:	cf 93       	push	r28
     174:	00 d0       	rcall	.+0      	; 0x176 <Switch_enuGetPressed+0x6>
     176:	00 d0       	rcall	.+0      	; 0x178 <Switch_enuGetPressed+0x8>
     178:	cd b7       	in	r28, 0x3d	; 61
     17a:	de b7       	in	r29, 0x3e	; 62
     17c:	8a 83       	std	Y+2, r24	; 0x02
     17e:	7c 83       	std	Y+4, r23	; 0x04
     180:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	89 83       	std	Y+1, r24	; 0x01


	if( (Copy_u8SwitchNum -= SWITCH_ZERO) < Switch_u8SwitchesMaxNum )
     186:	8a 81       	ldd	r24, Y+2	; 0x02
     188:	89 5c       	subi	r24, 0xC9	; 201
     18a:	8a 83       	std	Y+2, r24	; 0x02
     18c:	90 91 60 00 	lds	r25, 0x0060
     190:	8a 81       	ldd	r24, Y+2	; 0x02
     192:	89 17       	cp	r24, r25
     194:	08 f5       	brcc	.+66     	; 0x1d8 <Switch_enuGetPressed+0x68>
	{
		Local_enuErrorState =  DIO_enuGetPinValue(Switch[Copy_u8SwitchNum].sw_Grp , Switch[Copy_u8SwitchNum].sw_Pin , Copy_pu8SwitchValue ) ;
     196:	8a 81       	ldd	r24, Y+2	; 0x02
     198:	28 2f       	mov	r18, r24
     19a:	30 e0       	ldi	r19, 0x00	; 0
     19c:	c9 01       	movw	r24, r18
     19e:	88 0f       	add	r24, r24
     1a0:	99 1f       	adc	r25, r25
     1a2:	82 0f       	add	r24, r18
     1a4:	93 1f       	adc	r25, r19
     1a6:	fc 01       	movw	r30, r24
     1a8:	ef 59       	subi	r30, 0x9F	; 159
     1aa:	ff 4f       	sbci	r31, 0xFF	; 255
     1ac:	40 81       	ld	r20, Z
     1ae:	8a 81       	ldd	r24, Y+2	; 0x02
     1b0:	28 2f       	mov	r18, r24
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	c9 01       	movw	r24, r18
     1b6:	88 0f       	add	r24, r24
     1b8:	99 1f       	adc	r25, r25
     1ba:	82 0f       	add	r24, r18
     1bc:	93 1f       	adc	r25, r19
     1be:	fc 01       	movw	r30, r24
     1c0:	ee 59       	subi	r30, 0x9E	; 158
     1c2:	ff 4f       	sbci	r31, 0xFF	; 255
     1c4:	90 81       	ld	r25, Z
     1c6:	2b 81       	ldd	r18, Y+3	; 0x03
     1c8:	3c 81       	ldd	r19, Y+4	; 0x04
     1ca:	84 2f       	mov	r24, r20
     1cc:	69 2f       	mov	r22, r25
     1ce:	a9 01       	movw	r20, r18
     1d0:	0e 94 76 06 	call	0xcec	; 0xcec <DIO_enuGetPinValue>
     1d4:	89 83       	std	Y+1, r24	; 0x01
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <Switch_enuGetPressed+0x6c>
	}
	else Local_enuErrorState = ES_OUT_RANGE ;
     1d8:	82 e0       	ldi	r24, 0x02	; 2
     1da:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;
     1dc:	89 81       	ldd	r24, Y+1	; 0x01
}
     1de:	0f 90       	pop	r0
     1e0:	0f 90       	pop	r0
     1e2:	0f 90       	pop	r0
     1e4:	0f 90       	pop	r0
     1e6:	cf 91       	pop	r28
     1e8:	df 91       	pop	r29
     1ea:	08 95       	ret

000001ec <SevSeg_enuInit>:
extern u8 SevSeg_u8MaxModules;
extern u8 ModuleValuePins;
extern SSegModule_t SSegModule[];

ES_t SevSeg_enuInit(void)
{
     1ec:	df 93       	push	r29
     1ee:	cf 93       	push	r28
     1f0:	00 d0       	rcall	.+0      	; 0x1f2 <SevSeg_enuInit+0x6>
     1f2:	0f 92       	push	r0
     1f4:	cd b7       	in	r28, 0x3d	; 61
     1f6:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_NOK;
     1f8:	81 e0       	ldi	r24, 0x01	; 1
     1fa:	8b 83       	std	Y+3, r24	; 0x03

	for( u8 Local_u8Counter = 0 ; Local_u8Counter <= SevSeg_u8MaxModules ; Local_u8Counter++)
     1fc:	1a 82       	std	Y+2, r1	; 0x02
     1fe:	17 c1       	rjmp	.+558    	; 0x42e <SevSeg_enuInit+0x242>
	{
		for( u8 Local_u8PinNum = 0 ; Local_u8PinNum < ModuleValuePins ; Local_u8PinNum++ )
     200:	19 82       	std	Y+1, r1	; 0x01
     202:	67 c0       	rjmp	.+206    	; 0x2d2 <SevSeg_enuInit+0xe6>
		{
			if( 	ES_OK == DIO_enuSetPinDirection(	SSegModule[Local_u8Counter].Value_Conf[Local_u8PinNum].InputGrp ,
     204:	8a 81       	ldd	r24, Y+2	; 0x02
     206:	28 2f       	mov	r18, r24
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	89 81       	ldd	r24, Y+1	; 0x01
     20c:	48 2f       	mov	r20, r24
     20e:	50 e0       	ldi	r21, 0x00	; 0
     210:	c9 01       	movw	r24, r18
     212:	88 0f       	add	r24, r24
     214:	99 1f       	adc	r25, r25
     216:	82 0f       	add	r24, r18
     218:	93 1f       	adc	r25, r19
     21a:	88 0f       	add	r24, r24
     21c:	99 1f       	adc	r25, r25
     21e:	84 0f       	add	r24, r20
     220:	95 1f       	adc	r25, r21
     222:	88 0f       	add	r24, r24
     224:	99 1f       	adc	r25, r25
     226:	fc 01       	movw	r30, r24
     228:	e4 59       	subi	r30, 0x94	; 148
     22a:	ff 4f       	sbci	r31, 0xFF	; 255
     22c:	60 81       	ld	r22, Z
     22e:	8a 81       	ldd	r24, Y+2	; 0x02
     230:	28 2f       	mov	r18, r24
     232:	30 e0       	ldi	r19, 0x00	; 0
     234:	89 81       	ldd	r24, Y+1	; 0x01
     236:	48 2f       	mov	r20, r24
     238:	50 e0       	ldi	r21, 0x00	; 0
     23a:	c9 01       	movw	r24, r18
     23c:	88 0f       	add	r24, r24
     23e:	99 1f       	adc	r25, r25
     240:	82 0f       	add	r24, r18
     242:	93 1f       	adc	r25, r19
     244:	88 0f       	add	r24, r24
     246:	99 1f       	adc	r25, r25
     248:	84 0f       	add	r24, r20
     24a:	95 1f       	adc	r25, r21
     24c:	88 0f       	add	r24, r24
     24e:	99 1f       	adc	r25, r25
     250:	fc 01       	movw	r30, r24
     252:	e3 59       	subi	r30, 0x93	; 147
     254:	ff 4f       	sbci	r31, 0xFF	; 255
     256:	90 81       	ld	r25, Z
     258:	86 2f       	mov	r24, r22
     25a:	69 2f       	mov	r22, r25
     25c:	41 e0       	ldi	r20, 0x01	; 1
     25e:	0e 94 0d 04 	call	0x81a	; 0x81a <DIO_enuSetPinDirection>
     262:	88 23       	and	r24, r24
     264:	81 f5       	brne	.+96     	; 0x2c6 <SevSeg_enuInit+0xda>
														SSegModule[Local_u8Counter].Value_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT) )
			Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Local_u8Counter].Value_Conf[Local_u8PinNum].InputGrp ,
     266:	8a 81       	ldd	r24, Y+2	; 0x02
     268:	28 2f       	mov	r18, r24
     26a:	30 e0       	ldi	r19, 0x00	; 0
     26c:	89 81       	ldd	r24, Y+1	; 0x01
     26e:	48 2f       	mov	r20, r24
     270:	50 e0       	ldi	r21, 0x00	; 0
     272:	c9 01       	movw	r24, r18
     274:	88 0f       	add	r24, r24
     276:	99 1f       	adc	r25, r25
     278:	82 0f       	add	r24, r18
     27a:	93 1f       	adc	r25, r19
     27c:	88 0f       	add	r24, r24
     27e:	99 1f       	adc	r25, r25
     280:	84 0f       	add	r24, r20
     282:	95 1f       	adc	r25, r21
     284:	88 0f       	add	r24, r24
     286:	99 1f       	adc	r25, r25
     288:	fc 01       	movw	r30, r24
     28a:	e4 59       	subi	r30, 0x94	; 148
     28c:	ff 4f       	sbci	r31, 0xFF	; 255
     28e:	60 81       	ld	r22, Z
     290:	8a 81       	ldd	r24, Y+2	; 0x02
     292:	28 2f       	mov	r18, r24
     294:	30 e0       	ldi	r19, 0x00	; 0
     296:	89 81       	ldd	r24, Y+1	; 0x01
     298:	48 2f       	mov	r20, r24
     29a:	50 e0       	ldi	r21, 0x00	; 0
     29c:	c9 01       	movw	r24, r18
     29e:	88 0f       	add	r24, r24
     2a0:	99 1f       	adc	r25, r25
     2a2:	82 0f       	add	r24, r18
     2a4:	93 1f       	adc	r25, r19
     2a6:	88 0f       	add	r24, r24
     2a8:	99 1f       	adc	r25, r25
     2aa:	84 0f       	add	r24, r20
     2ac:	95 1f       	adc	r25, r21
     2ae:	88 0f       	add	r24, r24
     2b0:	99 1f       	adc	r25, r25
     2b2:	fc 01       	movw	r30, r24
     2b4:	e3 59       	subi	r30, 0x93	; 147
     2b6:	ff 4f       	sbci	r31, 0xFF	; 255
     2b8:	90 81       	ld	r25, Z
     2ba:	86 2f       	mov	r24, r22
     2bc:	69 2f       	mov	r22, r25
     2be:	40 e0       	ldi	r20, 0x00	; 0
     2c0:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <DIO_enuSetPinValue>
     2c4:	8b 83       	std	Y+3, r24	; 0x03
														SSegModule[Local_u8Counter].Value_Conf[Local_u8PinNum].InputPin , SEGMENT_OFF );
			if( Local_enuErrorState != ES_OK) break;
     2c6:	8b 81       	ldd	r24, Y+3	; 0x03
     2c8:	88 23       	and	r24, r24
     2ca:	49 f4       	brne	.+18     	; 0x2de <SevSeg_enuInit+0xf2>
{
	ES_t Local_enuErrorState = ES_NOK;

	for( u8 Local_u8Counter = 0 ; Local_u8Counter <= SevSeg_u8MaxModules ; Local_u8Counter++)
	{
		for( u8 Local_u8PinNum = 0 ; Local_u8PinNum < ModuleValuePins ; Local_u8PinNum++ )
     2cc:	89 81       	ldd	r24, Y+1	; 0x01
     2ce:	8f 5f       	subi	r24, 0xFF	; 255
     2d0:	89 83       	std	Y+1, r24	; 0x01
     2d2:	90 91 6b 00 	lds	r25, 0x006B
     2d6:	89 81       	ldd	r24, Y+1	; 0x01
     2d8:	89 17       	cp	r24, r25
     2da:	08 f4       	brcc	.+2      	; 0x2de <SevSeg_enuInit+0xf2>
     2dc:	93 cf       	rjmp	.-218    	; 0x204 <SevSeg_enuInit+0x18>
														SSegModule[Local_u8Counter].Value_Conf[Local_u8PinNum].InputPin , DIO_u8OUTPUT) )
			Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Local_u8Counter].Value_Conf[Local_u8PinNum].InputGrp ,
														SSegModule[Local_u8Counter].Value_Conf[Local_u8PinNum].InputPin , SEGMENT_OFF );
			if( Local_enuErrorState != ES_OK) break;
		}
		if( Local_enuErrorState == ES_OK)
     2de:	8b 81       	ldd	r24, Y+3	; 0x03
     2e0:	88 23       	and	r24, r24
     2e2:	09 f0       	breq	.+2      	; 0x2e6 <SevSeg_enuInit+0xfa>
     2e4:	4d c0       	rjmp	.+154    	; 0x380 <SevSeg_enuInit+0x194>
		{
			if( 	ES_OK == DIO_enuSetPinDirection(	SSegModule[Local_u8Counter].DIP_Conf.InputGrp ,
     2e6:	8a 81       	ldd	r24, Y+2	; 0x02
     2e8:	28 2f       	mov	r18, r24
     2ea:	30 e0       	ldi	r19, 0x00	; 0
     2ec:	c9 01       	movw	r24, r18
     2ee:	88 0f       	add	r24, r24
     2f0:	99 1f       	adc	r25, r25
     2f2:	82 0f       	add	r24, r18
     2f4:	93 1f       	adc	r25, r19
     2f6:	88 0f       	add	r24, r24
     2f8:	99 1f       	adc	r25, r25
     2fa:	88 0f       	add	r24, r24
     2fc:	99 1f       	adc	r25, r25
     2fe:	fc 01       	movw	r30, r24
     300:	ec 58       	subi	r30, 0x8C	; 140
     302:	ff 4f       	sbci	r31, 0xFF	; 255
     304:	40 81       	ld	r20, Z
     306:	8a 81       	ldd	r24, Y+2	; 0x02
     308:	28 2f       	mov	r18, r24
     30a:	30 e0       	ldi	r19, 0x00	; 0
     30c:	c9 01       	movw	r24, r18
     30e:	88 0f       	add	r24, r24
     310:	99 1f       	adc	r25, r25
     312:	82 0f       	add	r24, r18
     314:	93 1f       	adc	r25, r19
     316:	88 0f       	add	r24, r24
     318:	99 1f       	adc	r25, r25
     31a:	88 0f       	add	r24, r24
     31c:	99 1f       	adc	r25, r25
     31e:	fc 01       	movw	r30, r24
     320:	eb 58       	subi	r30, 0x8B	; 139
     322:	ff 4f       	sbci	r31, 0xFF	; 255
     324:	90 81       	ld	r25, Z
     326:	84 2f       	mov	r24, r20
     328:	69 2f       	mov	r22, r25
     32a:	41 e0       	ldi	r20, 0x01	; 1
     32c:	0e 94 0d 04 	call	0x81a	; 0x81a <DIO_enuSetPinDirection>
     330:	88 23       	and	r24, r24
     332:	31 f5       	brne	.+76     	; 0x380 <SevSeg_enuInit+0x194>
														SSegModule[Local_u8Counter].DIP_Conf.InputPin , DIO_u8OUTPUT) )
			Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Local_u8Counter].DIP_Conf.InputGrp ,
     334:	8a 81       	ldd	r24, Y+2	; 0x02
     336:	28 2f       	mov	r18, r24
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	c9 01       	movw	r24, r18
     33c:	88 0f       	add	r24, r24
     33e:	99 1f       	adc	r25, r25
     340:	82 0f       	add	r24, r18
     342:	93 1f       	adc	r25, r19
     344:	88 0f       	add	r24, r24
     346:	99 1f       	adc	r25, r25
     348:	88 0f       	add	r24, r24
     34a:	99 1f       	adc	r25, r25
     34c:	fc 01       	movw	r30, r24
     34e:	ec 58       	subi	r30, 0x8C	; 140
     350:	ff 4f       	sbci	r31, 0xFF	; 255
     352:	40 81       	ld	r20, Z
     354:	8a 81       	ldd	r24, Y+2	; 0x02
     356:	28 2f       	mov	r18, r24
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	c9 01       	movw	r24, r18
     35c:	88 0f       	add	r24, r24
     35e:	99 1f       	adc	r25, r25
     360:	82 0f       	add	r24, r18
     362:	93 1f       	adc	r25, r19
     364:	88 0f       	add	r24, r24
     366:	99 1f       	adc	r25, r25
     368:	88 0f       	add	r24, r24
     36a:	99 1f       	adc	r25, r25
     36c:	fc 01       	movw	r30, r24
     36e:	eb 58       	subi	r30, 0x8B	; 139
     370:	ff 4f       	sbci	r31, 0xFF	; 255
     372:	90 81       	ld	r25, Z
     374:	84 2f       	mov	r24, r20
     376:	69 2f       	mov	r22, r25
     378:	41 e0       	ldi	r20, 0x01	; 1
     37a:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <DIO_enuSetPinValue>
     37e:	8b 83       	std	Y+3, r24	; 0x03
														SSegModule[Local_u8Counter].DIP_Conf.InputPin , DIP_OFF );
		}
		if( Local_enuErrorState == ES_OK)
     380:	8b 81       	ldd	r24, Y+3	; 0x03
     382:	88 23       	and	r24, r24
     384:	09 f0       	breq	.+2      	; 0x388 <SevSeg_enuInit+0x19c>
     386:	4d c0       	rjmp	.+154    	; 0x422 <SevSeg_enuInit+0x236>
		{
			if( 	ES_OK == DIO_enuSetPinDirection(	SSegModule[Local_u8Counter].Enable_Conf.InputGrp ,
     388:	8a 81       	ldd	r24, Y+2	; 0x02
     38a:	28 2f       	mov	r18, r24
     38c:	30 e0       	ldi	r19, 0x00	; 0
     38e:	c9 01       	movw	r24, r18
     390:	88 0f       	add	r24, r24
     392:	99 1f       	adc	r25, r25
     394:	82 0f       	add	r24, r18
     396:	93 1f       	adc	r25, r19
     398:	88 0f       	add	r24, r24
     39a:	99 1f       	adc	r25, r25
     39c:	88 0f       	add	r24, r24
     39e:	99 1f       	adc	r25, r25
     3a0:	fc 01       	movw	r30, r24
     3a2:	ea 58       	subi	r30, 0x8A	; 138
     3a4:	ff 4f       	sbci	r31, 0xFF	; 255
     3a6:	40 81       	ld	r20, Z
     3a8:	8a 81       	ldd	r24, Y+2	; 0x02
     3aa:	28 2f       	mov	r18, r24
     3ac:	30 e0       	ldi	r19, 0x00	; 0
     3ae:	c9 01       	movw	r24, r18
     3b0:	88 0f       	add	r24, r24
     3b2:	99 1f       	adc	r25, r25
     3b4:	82 0f       	add	r24, r18
     3b6:	93 1f       	adc	r25, r19
     3b8:	88 0f       	add	r24, r24
     3ba:	99 1f       	adc	r25, r25
     3bc:	88 0f       	add	r24, r24
     3be:	99 1f       	adc	r25, r25
     3c0:	fc 01       	movw	r30, r24
     3c2:	e9 58       	subi	r30, 0x89	; 137
     3c4:	ff 4f       	sbci	r31, 0xFF	; 255
     3c6:	90 81       	ld	r25, Z
     3c8:	84 2f       	mov	r24, r20
     3ca:	69 2f       	mov	r22, r25
     3cc:	41 e0       	ldi	r20, 0x01	; 1
     3ce:	0e 94 0d 04 	call	0x81a	; 0x81a <DIO_enuSetPinDirection>
     3d2:	88 23       	and	r24, r24
     3d4:	31 f5       	brne	.+76     	; 0x422 <SevSeg_enuInit+0x236>
														SSegModule[Local_u8Counter].Enable_Conf.InputPin , DIO_u8OUTPUT) )
			Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Local_u8Counter].Enable_Conf.InputGrp ,
     3d6:	8a 81       	ldd	r24, Y+2	; 0x02
     3d8:	28 2f       	mov	r18, r24
     3da:	30 e0       	ldi	r19, 0x00	; 0
     3dc:	c9 01       	movw	r24, r18
     3de:	88 0f       	add	r24, r24
     3e0:	99 1f       	adc	r25, r25
     3e2:	82 0f       	add	r24, r18
     3e4:	93 1f       	adc	r25, r19
     3e6:	88 0f       	add	r24, r24
     3e8:	99 1f       	adc	r25, r25
     3ea:	88 0f       	add	r24, r24
     3ec:	99 1f       	adc	r25, r25
     3ee:	fc 01       	movw	r30, r24
     3f0:	ea 58       	subi	r30, 0x8A	; 138
     3f2:	ff 4f       	sbci	r31, 0xFF	; 255
     3f4:	40 81       	ld	r20, Z
     3f6:	8a 81       	ldd	r24, Y+2	; 0x02
     3f8:	28 2f       	mov	r18, r24
     3fa:	30 e0       	ldi	r19, 0x00	; 0
     3fc:	c9 01       	movw	r24, r18
     3fe:	88 0f       	add	r24, r24
     400:	99 1f       	adc	r25, r25
     402:	82 0f       	add	r24, r18
     404:	93 1f       	adc	r25, r19
     406:	88 0f       	add	r24, r24
     408:	99 1f       	adc	r25, r25
     40a:	88 0f       	add	r24, r24
     40c:	99 1f       	adc	r25, r25
     40e:	fc 01       	movw	r30, r24
     410:	e9 58       	subi	r30, 0x89	; 137
     412:	ff 4f       	sbci	r31, 0xFF	; 255
     414:	90 81       	ld	r25, Z
     416:	84 2f       	mov	r24, r20
     418:	69 2f       	mov	r22, r25
     41a:	41 e0       	ldi	r20, 0x01	; 1
     41c:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <DIO_enuSetPinValue>
     420:	8b 83       	std	Y+3, r24	; 0x03
														SSegModule[Local_u8Counter].Enable_Conf.InputPin , MOD_EN_ON );
		}
		if( Local_enuErrorState != ES_OK) break;
     422:	8b 81       	ldd	r24, Y+3	; 0x03
     424:	88 23       	and	r24, r24
     426:	49 f4       	brne	.+18     	; 0x43a <SevSeg_enuInit+0x24e>

ES_t SevSeg_enuInit(void)
{
	ES_t Local_enuErrorState = ES_NOK;

	for( u8 Local_u8Counter = 0 ; Local_u8Counter <= SevSeg_u8MaxModules ; Local_u8Counter++)
     428:	8a 81       	ldd	r24, Y+2	; 0x02
     42a:	8f 5f       	subi	r24, 0xFF	; 255
     42c:	8a 83       	std	Y+2, r24	; 0x02
     42e:	90 91 6a 00 	lds	r25, 0x006A
     432:	8a 81       	ldd	r24, Y+2	; 0x02
     434:	98 17       	cp	r25, r24
     436:	08 f0       	brcs	.+2      	; 0x43a <SevSeg_enuInit+0x24e>
     438:	e3 ce       	rjmp	.-570    	; 0x200 <SevSeg_enuInit+0x14>
														SSegModule[Local_u8Counter].Enable_Conf.InputPin , MOD_EN_ON );
		}
		if( Local_enuErrorState != ES_OK) break;
	}

	return Local_enuErrorState ;//DONE
     43a:	8b 81       	ldd	r24, Y+3	; 0x03
}
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	cf 91       	pop	r28
     444:	df 91       	pop	r29
     446:	08 95       	ret

00000448 <SevSeg_enuSetDigitValue>:
ES_t SevSeg_enuSetDigitValue(u8 Copy_u8ModuleNum , u8 Copy_u8SevSegDigitValue)
{
     448:	df 93       	push	r29
     44a:	cf 93       	push	r28
     44c:	00 d0       	rcall	.+0      	; 0x44e <SevSeg_enuSetDigitValue+0x6>
     44e:	00 d0       	rcall	.+0      	; 0x450 <SevSeg_enuSetDigitValue+0x8>
     450:	0f 92       	push	r0
     452:	cd b7       	in	r28, 0x3d	; 61
     454:	de b7       	in	r29, 0x3e	; 62
     456:	8c 83       	std	Y+4, r24	; 0x04
     458:	6d 83       	std	Y+5, r22	; 0x05
	ES_t Local_enuErrorState=ES_NOK ;
     45a:	81 e0       	ldi	r24, 0x01	; 1
     45c:	8b 83       	std	Y+3, r24	; 0x03
	
	if( ( (Copy_u8ModuleNum - MODULE_1) < SevSeg_u8MaxModules ) &&	( Copy_u8SevSegDigitValue < DIGIT_BASE ) )
     45e:	8c 81       	ldd	r24, Y+4	; 0x04
     460:	88 2f       	mov	r24, r24
     462:	90 e0       	ldi	r25, 0x00	; 0
     464:	9c 01       	movw	r18, r24
     466:	2b 50       	subi	r18, 0x0B	; 11
     468:	30 40       	sbci	r19, 0x00	; 0
     46a:	80 91 6a 00 	lds	r24, 0x006A
     46e:	88 2f       	mov	r24, r24
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	28 17       	cp	r18, r24
     474:	39 07       	cpc	r19, r25
     476:	0c f0       	brlt	.+2      	; 0x47a <SevSeg_enuSetDigitValue+0x32>
     478:	55 c0       	rjmp	.+170    	; 0x524 <SevSeg_enuSetDigitValue+0xdc>
     47a:	8d 81       	ldd	r24, Y+5	; 0x05
     47c:	8a 30       	cpi	r24, 0x0A	; 10
     47e:	08 f0       	brcs	.+2      	; 0x482 <SevSeg_enuSetDigitValue+0x3a>
     480:	51 c0       	rjmp	.+162    	; 0x524 <SevSeg_enuSetDigitValue+0xdc>
	{
		Copy_u8ModuleNum -= (u8)MODULE_1;
     482:	8c 81       	ldd	r24, Y+4	; 0x04
     484:	8b 50       	subi	r24, 0x0B	; 11
     486:	8c 83       	std	Y+4, r24	; 0x04
		u8 Local_u8BitValue;
		for( u8 Local_u8Counter = 0 ; Local_u8Counter < ModuleValuePins ; Local_u8Counter++ )
     488:	19 82       	std	Y+1, r1	; 0x01
     48a:	45 c0       	rjmp	.+138    	; 0x516 <SevSeg_enuSetDigitValue+0xce>
		{
			Local_u8BitValue = (((Copy_u8SevSegDigitValue >> Local_u8Counter ) & SevSeg_u8BIT_MASK )? SEGMENT_ON : SEGMENT_OFF );
     48c:	8d 81       	ldd	r24, Y+5	; 0x05
     48e:	28 2f       	mov	r18, r24
     490:	30 e0       	ldi	r19, 0x00	; 0
     492:	89 81       	ldd	r24, Y+1	; 0x01
     494:	88 2f       	mov	r24, r24
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	a9 01       	movw	r20, r18
     49a:	02 c0       	rjmp	.+4      	; 0x4a0 <SevSeg_enuSetDigitValue+0x58>
     49c:	55 95       	asr	r21
     49e:	47 95       	ror	r20
     4a0:	8a 95       	dec	r24
     4a2:	e2 f7       	brpl	.-8      	; 0x49c <SevSeg_enuSetDigitValue+0x54>
     4a4:	ca 01       	movw	r24, r20
     4a6:	81 70       	andi	r24, 0x01	; 1
     4a8:	8a 83       	std	Y+2, r24	; 0x02
			Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8ModuleNum].Value_Conf[Local_u8Counter].InputGrp ,
     4aa:	8c 81       	ldd	r24, Y+4	; 0x04
     4ac:	28 2f       	mov	r18, r24
     4ae:	30 e0       	ldi	r19, 0x00	; 0
     4b0:	89 81       	ldd	r24, Y+1	; 0x01
     4b2:	48 2f       	mov	r20, r24
     4b4:	50 e0       	ldi	r21, 0x00	; 0
     4b6:	c9 01       	movw	r24, r18
     4b8:	88 0f       	add	r24, r24
     4ba:	99 1f       	adc	r25, r25
     4bc:	82 0f       	add	r24, r18
     4be:	93 1f       	adc	r25, r19
     4c0:	88 0f       	add	r24, r24
     4c2:	99 1f       	adc	r25, r25
     4c4:	84 0f       	add	r24, r20
     4c6:	95 1f       	adc	r25, r21
     4c8:	88 0f       	add	r24, r24
     4ca:	99 1f       	adc	r25, r25
     4cc:	fc 01       	movw	r30, r24
     4ce:	e4 59       	subi	r30, 0x94	; 148
     4d0:	ff 4f       	sbci	r31, 0xFF	; 255
     4d2:	60 81       	ld	r22, Z
     4d4:	8c 81       	ldd	r24, Y+4	; 0x04
     4d6:	28 2f       	mov	r18, r24
     4d8:	30 e0       	ldi	r19, 0x00	; 0
     4da:	89 81       	ldd	r24, Y+1	; 0x01
     4dc:	48 2f       	mov	r20, r24
     4de:	50 e0       	ldi	r21, 0x00	; 0
     4e0:	c9 01       	movw	r24, r18
     4e2:	88 0f       	add	r24, r24
     4e4:	99 1f       	adc	r25, r25
     4e6:	82 0f       	add	r24, r18
     4e8:	93 1f       	adc	r25, r19
     4ea:	88 0f       	add	r24, r24
     4ec:	99 1f       	adc	r25, r25
     4ee:	84 0f       	add	r24, r20
     4f0:	95 1f       	adc	r25, r21
     4f2:	88 0f       	add	r24, r24
     4f4:	99 1f       	adc	r25, r25
     4f6:	fc 01       	movw	r30, r24
     4f8:	e3 59       	subi	r30, 0x93	; 147
     4fa:	ff 4f       	sbci	r31, 0xFF	; 255
     4fc:	90 81       	ld	r25, Z
     4fe:	86 2f       	mov	r24, r22
     500:	69 2f       	mov	r22, r25
     502:	4a 81       	ldd	r20, Y+2	; 0x02
     504:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <DIO_enuSetPinValue>
     508:	8b 83       	std	Y+3, r24	; 0x03
														SSegModule[Copy_u8ModuleNum].Value_Conf[Local_u8Counter].InputPin ,
														Local_u8BitValue );
			if( Local_enuErrorState != ES_OK) break;
     50a:	8b 81       	ldd	r24, Y+3	; 0x03
     50c:	88 23       	and	r24, r24
     50e:	61 f4       	brne	.+24     	; 0x528 <SevSeg_enuSetDigitValue+0xe0>
	
	if( ( (Copy_u8ModuleNum - MODULE_1) < SevSeg_u8MaxModules ) &&	( Copy_u8SevSegDigitValue < DIGIT_BASE ) )
	{
		Copy_u8ModuleNum -= (u8)MODULE_1;
		u8 Local_u8BitValue;
		for( u8 Local_u8Counter = 0 ; Local_u8Counter < ModuleValuePins ; Local_u8Counter++ )
     510:	89 81       	ldd	r24, Y+1	; 0x01
     512:	8f 5f       	subi	r24, 0xFF	; 255
     514:	89 83       	std	Y+1, r24	; 0x01
     516:	90 91 6b 00 	lds	r25, 0x006B
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	89 17       	cp	r24, r25
     51e:	08 f4       	brcc	.+2      	; 0x522 <SevSeg_enuSetDigitValue+0xda>
     520:	b5 cf       	rjmp	.-150    	; 0x48c <SevSeg_enuSetDigitValue+0x44>
     522:	02 c0       	rjmp	.+4      	; 0x528 <SevSeg_enuSetDigitValue+0xe0>
														SSegModule[Copy_u8ModuleNum].Value_Conf[Local_u8Counter].InputPin ,
														Local_u8BitValue );
			if( Local_enuErrorState != ES_OK) break;
		}
	}
	else Local_enuErrorState = ES_OUT_RANGE;
     524:	82 e0       	ldi	r24, 0x02	; 2
     526:	8b 83       	std	Y+3, r24	; 0x03


	return Local_enuErrorState ;//DONE
     528:	8b 81       	ldd	r24, Y+3	; 0x03
}
     52a:	0f 90       	pop	r0
     52c:	0f 90       	pop	r0
     52e:	0f 90       	pop	r0
     530:	0f 90       	pop	r0
     532:	0f 90       	pop	r0
     534:	cf 91       	pop	r28
     536:	df 91       	pop	r29
     538:	08 95       	ret

0000053a <SevSeg_enuSetDIPValue>:

ES_t SevSeg_enuSetDIPValue(u8 Copy_u8ModuleNum ,u8 Copy_u8SevSegDIPValue)
{
     53a:	df 93       	push	r29
     53c:	cf 93       	push	r28
     53e:	00 d0       	rcall	.+0      	; 0x540 <SevSeg_enuSetDIPValue+0x6>
     540:	0f 92       	push	r0
     542:	cd b7       	in	r28, 0x3d	; 61
     544:	de b7       	in	r29, 0x3e	; 62
     546:	8a 83       	std	Y+2, r24	; 0x02
     548:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
     54a:	81 e0       	ldi	r24, 0x01	; 1
     54c:	89 83       	std	Y+1, r24	; 0x01

	if( ( (Copy_u8ModuleNum - MODULE_1) < SevSeg_u8MaxModules ) &&
     54e:	8a 81       	ldd	r24, Y+2	; 0x02
     550:	88 2f       	mov	r24, r24
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	9c 01       	movw	r18, r24
     556:	2b 50       	subi	r18, 0x0B	; 11
     558:	30 40       	sbci	r19, 0x00	; 0
     55a:	80 91 6a 00 	lds	r24, 0x006A
     55e:	88 2f       	mov	r24, r24
     560:	90 e0       	ldi	r25, 0x00	; 0
     562:	28 17       	cp	r18, r24
     564:	39 07       	cpc	r19, r25
     566:	84 f5       	brge	.+96     	; 0x5c8 <SevSeg_enuSetDIPValue+0x8e>
     568:	8b 81       	ldd	r24, Y+3	; 0x03
     56a:	88 23       	and	r24, r24
     56c:	19 f0       	breq	.+6      	; 0x574 <SevSeg_enuSetDIPValue+0x3a>
     56e:	8b 81       	ldd	r24, Y+3	; 0x03
     570:	81 30       	cpi	r24, 0x01	; 1
     572:	51 f5       	brne	.+84     	; 0x5c8 <SevSeg_enuSetDIPValue+0x8e>
		( Copy_u8SevSegDIPValue == DIP_ON ||Copy_u8SevSegDIPValue == DIP_OFF ) )
	{
		Copy_u8ModuleNum -= (u8)MODULE_1;
     574:	8a 81       	ldd	r24, Y+2	; 0x02
     576:	8b 50       	subi	r24, 0x0B	; 11
     578:	8a 83       	std	Y+2, r24	; 0x02
		Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8ModuleNum].DIP_Conf.InputGrp ,
     57a:	8a 81       	ldd	r24, Y+2	; 0x02
     57c:	28 2f       	mov	r18, r24
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	c9 01       	movw	r24, r18
     582:	88 0f       	add	r24, r24
     584:	99 1f       	adc	r25, r25
     586:	82 0f       	add	r24, r18
     588:	93 1f       	adc	r25, r19
     58a:	88 0f       	add	r24, r24
     58c:	99 1f       	adc	r25, r25
     58e:	88 0f       	add	r24, r24
     590:	99 1f       	adc	r25, r25
     592:	fc 01       	movw	r30, r24
     594:	ec 58       	subi	r30, 0x8C	; 140
     596:	ff 4f       	sbci	r31, 0xFF	; 255
     598:	40 81       	ld	r20, Z
     59a:	8a 81       	ldd	r24, Y+2	; 0x02
     59c:	28 2f       	mov	r18, r24
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	c9 01       	movw	r24, r18
     5a2:	88 0f       	add	r24, r24
     5a4:	99 1f       	adc	r25, r25
     5a6:	82 0f       	add	r24, r18
     5a8:	93 1f       	adc	r25, r19
     5aa:	88 0f       	add	r24, r24
     5ac:	99 1f       	adc	r25, r25
     5ae:	88 0f       	add	r24, r24
     5b0:	99 1f       	adc	r25, r25
     5b2:	fc 01       	movw	r30, r24
     5b4:	eb 58       	subi	r30, 0x8B	; 139
     5b6:	ff 4f       	sbci	r31, 0xFF	; 255
     5b8:	90 81       	ld	r25, Z
     5ba:	84 2f       	mov	r24, r20
     5bc:	69 2f       	mov	r22, r25
     5be:	4b 81       	ldd	r20, Y+3	; 0x03
     5c0:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <DIO_enuSetPinValue>
     5c4:	89 83       	std	Y+1, r24	; 0x01
     5c6:	02 c0       	rjmp	.+4      	; 0x5cc <SevSeg_enuSetDIPValue+0x92>
													SSegModule[Copy_u8ModuleNum].DIP_Conf.InputPin , Copy_u8SevSegDIPValue );
	}
	else Local_enuErrorState = ES_OUT_RANGE;
     5c8:	82 e0       	ldi	r24, 0x02	; 2
     5ca:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;//DONE
     5cc:	89 81       	ldd	r24, Y+1	; 0x01
}
     5ce:	0f 90       	pop	r0
     5d0:	0f 90       	pop	r0
     5d2:	0f 90       	pop	r0
     5d4:	cf 91       	pop	r28
     5d6:	df 91       	pop	r29
     5d8:	08 95       	ret

000005da <SevSeg_enuFrameDelay>:

ES_t SevSeg_enuFrameDelay(u8 Copy_u8SevSegTotalModules, u8 *Copy_pu8SevSegModuleDelay)
{
     5da:	df 93       	push	r29
     5dc:	cf 93       	push	r28
     5de:	00 d0       	rcall	.+0      	; 0x5e0 <SevSeg_enuFrameDelay+0x6>
     5e0:	00 d0       	rcall	.+0      	; 0x5e2 <SevSeg_enuFrameDelay+0x8>
     5e2:	cd b7       	in	r28, 0x3d	; 61
     5e4:	de b7       	in	r29, 0x3e	; 62
     5e6:	8a 83       	std	Y+2, r24	; 0x02
     5e8:	7c 83       	std	Y+4, r23	; 0x04
     5ea:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState=ES_NOK;
     5ec:	81 e0       	ldi	r24, 0x01	; 1
     5ee:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8SevSegTotalModules <= SevSeg_u8MaxModules)
     5f0:	90 91 6a 00 	lds	r25, 0x006A
     5f4:	8a 81       	ldd	r24, Y+2	; 0x02
     5f6:	98 17       	cp	r25, r24
     5f8:	98 f0       	brcs	.+38     	; 0x620 <SevSeg_enuFrameDelay+0x46>
	{
		*Copy_pu8SevSegModuleDelay = SevSeg_u8MODULE_DELAY( Copy_u8SevSegTotalModules );
     5fa:	8a 81       	ldd	r24, Y+2	; 0x02
     5fc:	88 2f       	mov	r24, r24
     5fe:	90 e0       	ldi	r25, 0x00	; 0
     600:	ac 01       	movw	r20, r24
     602:	4d 5e       	subi	r20, 0xED	; 237
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	8a 81       	ldd	r24, Y+2	; 0x02
     608:	28 2f       	mov	r18, r24
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	ca 01       	movw	r24, r20
     60e:	b9 01       	movw	r22, r18
     610:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <__divmodhi4>
     614:	cb 01       	movw	r24, r22
     616:	eb 81       	ldd	r30, Y+3	; 0x03
     618:	fc 81       	ldd	r31, Y+4	; 0x04
     61a:	80 83       	st	Z, r24

		Local_enuErrorState=ES_OK;
     61c:	19 82       	std	Y+1, r1	; 0x01
     61e:	02 c0       	rjmp	.+4      	; 0x624 <SevSeg_enuFrameDelay+0x4a>
	}
	else Local_enuErrorState = ES_OUT_RANGE;
     620:	82 e0       	ldi	r24, 0x02	; 2
     622:	89 83       	std	Y+1, r24	; 0x01

	return Local_enuErrorState ;//DONE
     624:	89 81       	ldd	r24, Y+1	; 0x01
}
     626:	0f 90       	pop	r0
     628:	0f 90       	pop	r0
     62a:	0f 90       	pop	r0
     62c:	0f 90       	pop	r0
     62e:	cf 91       	pop	r28
     630:	df 91       	pop	r29
     632:	08 95       	ret

00000634 <SevSeg_enuModuleControl>:

ES_t SevSeg_enuModuleControl(u8 Copy_u8ModuleNum , u8 Copy_u8ModuleStatus)
{
     634:	df 93       	push	r29
     636:	cf 93       	push	r28
     638:	00 d0       	rcall	.+0      	; 0x63a <SevSeg_enuModuleControl+0x6>
     63a:	00 d0       	rcall	.+0      	; 0x63c <SevSeg_enuModuleControl+0x8>
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
     640:	8b 83       	std	Y+3, r24	; 0x03
     642:	6c 83       	std	Y+4, r22	; 0x04
	ES_t Local_enuErrorState=ES_NOK;
     644:	81 e0       	ldi	r24, 0x01	; 1
     646:	8a 83       	std	Y+2, r24	; 0x02

	if( ( Copy_u8ModuleStatus == MODULE_DISABLE || Copy_u8ModuleStatus == MODULE_ENABLE ) &&
     648:	8c 81       	ldd	r24, Y+4	; 0x04
     64a:	8d 30       	cpi	r24, 0x0D	; 13
     64c:	19 f0       	breq	.+6      	; 0x654 <SevSeg_enuModuleControl+0x20>
     64e:	8c 81       	ldd	r24, Y+4	; 0x04
     650:	8e 30       	cpi	r24, 0x0E	; 14
     652:	e9 f5       	brne	.+122    	; 0x6ce <SevSeg_enuModuleControl+0x9a>
     654:	8b 81       	ldd	r24, Y+3	; 0x03
     656:	88 2f       	mov	r24, r24
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	9c 01       	movw	r18, r24
     65c:	2b 50       	subi	r18, 0x0B	; 11
     65e:	30 40       	sbci	r19, 0x00	; 0
     660:	80 91 6a 00 	lds	r24, 0x006A
     664:	88 2f       	mov	r24, r24
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	28 17       	cp	r18, r24
     66a:	39 07       	cpc	r19, r25
     66c:	84 f5       	brge	.+96     	; 0x6ce <SevSeg_enuModuleControl+0x9a>
		( Copy_u8ModuleNum - MODULE_1 < SevSeg_u8MaxModules ) )
	{
		Copy_u8ModuleNum -= (u8)MODULE_1;
     66e:	8b 81       	ldd	r24, Y+3	; 0x03
     670:	8b 50       	subi	r24, 0x0B	; 11
     672:	8b 83       	std	Y+3, r24	; 0x03
		u8 Local_u8ModuleStatus = ( Copy_u8ModuleStatus == MODULE_ENABLE ? MOD_EN_ON : MOD_EN_OFF );
     674:	19 82       	std	Y+1, r1	; 0x01
     676:	8c 81       	ldd	r24, Y+4	; 0x04
     678:	8e 30       	cpi	r24, 0x0E	; 14
     67a:	11 f4       	brne	.+4      	; 0x680 <SevSeg_enuModuleControl+0x4c>
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	89 83       	std	Y+1, r24	; 0x01
		Local_enuErrorState = DIO_enuSetPinValue(	SSegModule[Copy_u8ModuleNum].Enable_Conf.InputGrp ,
     680:	8b 81       	ldd	r24, Y+3	; 0x03
     682:	28 2f       	mov	r18, r24
     684:	30 e0       	ldi	r19, 0x00	; 0
     686:	c9 01       	movw	r24, r18
     688:	88 0f       	add	r24, r24
     68a:	99 1f       	adc	r25, r25
     68c:	82 0f       	add	r24, r18
     68e:	93 1f       	adc	r25, r19
     690:	88 0f       	add	r24, r24
     692:	99 1f       	adc	r25, r25
     694:	88 0f       	add	r24, r24
     696:	99 1f       	adc	r25, r25
     698:	fc 01       	movw	r30, r24
     69a:	ea 58       	subi	r30, 0x8A	; 138
     69c:	ff 4f       	sbci	r31, 0xFF	; 255
     69e:	40 81       	ld	r20, Z
     6a0:	8b 81       	ldd	r24, Y+3	; 0x03
     6a2:	28 2f       	mov	r18, r24
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	c9 01       	movw	r24, r18
     6a8:	88 0f       	add	r24, r24
     6aa:	99 1f       	adc	r25, r25
     6ac:	82 0f       	add	r24, r18
     6ae:	93 1f       	adc	r25, r19
     6b0:	88 0f       	add	r24, r24
     6b2:	99 1f       	adc	r25, r25
     6b4:	88 0f       	add	r24, r24
     6b6:	99 1f       	adc	r25, r25
     6b8:	fc 01       	movw	r30, r24
     6ba:	e9 58       	subi	r30, 0x89	; 137
     6bc:	ff 4f       	sbci	r31, 0xFF	; 255
     6be:	90 81       	ld	r25, Z
     6c0:	84 2f       	mov	r24, r20
     6c2:	69 2f       	mov	r22, r25
     6c4:	49 81       	ldd	r20, Y+1	; 0x01
     6c6:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <DIO_enuSetPinValue>
     6ca:	8a 83       	std	Y+2, r24	; 0x02
     6cc:	02 c0       	rjmp	.+4      	; 0x6d2 <SevSeg_enuModuleControl+0x9e>
													SSegModule[Copy_u8ModuleNum].Enable_Conf.InputPin ,
													Local_u8ModuleStatus );
	}
	else	Local_enuErrorState = ES_OUT_RANGE;
     6ce:	82 e0       	ldi	r24, 0x02	; 2
     6d0:	8a 83       	std	Y+2, r24	; 0x02

	return Local_enuErrorState ;//DONE
     6d2:	8a 81       	ldd	r24, Y+2	; 0x02
}
     6d4:	0f 90       	pop	r0
     6d6:	0f 90       	pop	r0
     6d8:	0f 90       	pop	r0
     6da:	0f 90       	pop	r0
     6dc:	cf 91       	pop	r28
     6de:	df 91       	pop	r29
     6e0:	08 95       	ret

000006e2 <LD_enuInit>:
extern u8 LD_u8LD_MaxNum;
extern LD_t LD[];


ES_t LD_enuInit(void)
{
     6e2:	df 93       	push	r29
     6e4:	cf 93       	push	r28
     6e6:	00 d0       	rcall	.+0      	; 0x6e8 <LD_enuInit+0x6>
     6e8:	00 d0       	rcall	.+0      	; 0x6ea <LD_enuInit+0x8>
     6ea:	cd b7       	in	r28, 0x3d	; 61
     6ec:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorStatus = ES_NOK , Local_AenuStatus[2];
     6ee:	81 e0       	ldi	r24, 0x01	; 1
     6f0:	8a 83       	std	Y+2, r24	; 0x02

	for(u8 Local_u8Iter = 0; Local_u8Iter < LD_u8LD_MaxNum ; Local_u8Iter++)
     6f2:	19 82       	std	Y+1, r1	; 0x01
     6f4:	39 c0       	rjmp	.+114    	; 0x768 <LD_enuInit+0x86>
	{
		Local_AenuStatus[0] = DIO_enuSetPinDirection( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , DIO_u8OUTPUT);
     6f6:	89 81       	ldd	r24, Y+1	; 0x01
     6f8:	88 2f       	mov	r24, r24
     6fa:	90 e0       	ldi	r25, 0x00	; 0
     6fc:	88 0f       	add	r24, r24
     6fe:	99 1f       	adc	r25, r25
     700:	fc 01       	movw	r30, r24
     702:	eb 57       	subi	r30, 0x7B	; 123
     704:	ff 4f       	sbci	r31, 0xFF	; 255
     706:	20 81       	ld	r18, Z
     708:	89 81       	ldd	r24, Y+1	; 0x01
     70a:	88 2f       	mov	r24, r24
     70c:	90 e0       	ldi	r25, 0x00	; 0
     70e:	88 0f       	add	r24, r24
     710:	99 1f       	adc	r25, r25
     712:	fc 01       	movw	r30, r24
     714:	ea 57       	subi	r30, 0x7A	; 122
     716:	ff 4f       	sbci	r31, 0xFF	; 255
     718:	90 81       	ld	r25, Z
     71a:	82 2f       	mov	r24, r18
     71c:	69 2f       	mov	r22, r25
     71e:	41 e0       	ldi	r20, 0x01	; 1
     720:	0e 94 0d 04 	call	0x81a	; 0x81a <DIO_enuSetPinDirection>
     724:	8b 83       	std	Y+3, r24	; 0x03
		Local_AenuStatus[1] = DIO_enuSetPinValue( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , LD_u8OFF);
     726:	89 81       	ldd	r24, Y+1	; 0x01
     728:	88 2f       	mov	r24, r24
     72a:	90 e0       	ldi	r25, 0x00	; 0
     72c:	88 0f       	add	r24, r24
     72e:	99 1f       	adc	r25, r25
     730:	fc 01       	movw	r30, r24
     732:	eb 57       	subi	r30, 0x7B	; 123
     734:	ff 4f       	sbci	r31, 0xFF	; 255
     736:	20 81       	ld	r18, Z
     738:	89 81       	ldd	r24, Y+1	; 0x01
     73a:	88 2f       	mov	r24, r24
     73c:	90 e0       	ldi	r25, 0x00	; 0
     73e:	88 0f       	add	r24, r24
     740:	99 1f       	adc	r25, r25
     742:	fc 01       	movw	r30, r24
     744:	ea 57       	subi	r30, 0x7A	; 122
     746:	ff 4f       	sbci	r31, 0xFF	; 255
     748:	90 81       	ld	r25, Z
     74a:	82 2f       	mov	r24, r18
     74c:	69 2f       	mov	r22, r25
     74e:	40 e0       	ldi	r20, 0x00	; 0
     750:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <DIO_enuSetPinValue>
     754:	8c 83       	std	Y+4, r24	; 0x04

		if(Local_AenuStatus[0] != ES_OK || Local_AenuStatus[1] != ES_OK) break;
     756:	8b 81       	ldd	r24, Y+3	; 0x03
     758:	88 23       	and	r24, r24
     75a:	59 f4       	brne	.+22     	; 0x772 <LD_enuInit+0x90>
     75c:	8c 81       	ldd	r24, Y+4	; 0x04
     75e:	88 23       	and	r24, r24
     760:	41 f4       	brne	.+16     	; 0x772 <LD_enuInit+0x90>

ES_t LD_enuInit(void)
{
	ES_t Local_enuErrorStatus = ES_NOK , Local_AenuStatus[2];

	for(u8 Local_u8Iter = 0; Local_u8Iter < LD_u8LD_MaxNum ; Local_u8Iter++)
     762:	89 81       	ldd	r24, Y+1	; 0x01
     764:	8f 5f       	subi	r24, 0xFF	; 255
     766:	89 83       	std	Y+1, r24	; 0x01
     768:	90 91 84 00 	lds	r25, 0x0084
     76c:	89 81       	ldd	r24, Y+1	; 0x01
     76e:	89 17       	cp	r24, r25
     770:	10 f2       	brcs	.-124    	; 0x6f6 <LD_enuInit+0x14>
		Local_AenuStatus[1] = DIO_enuSetPinValue( LD[Local_u8Iter].LD_Grp , LD[Local_u8Iter].LD_Pin , LD_u8OFF);

		if(Local_AenuStatus[0] != ES_OK || Local_AenuStatus[1] != ES_OK) break;
	}

	if(Local_AenuStatus[0] == ES_OK && Local_AenuStatus[1] == ES_OK)
     772:	8b 81       	ldd	r24, Y+3	; 0x03
     774:	88 23       	and	r24, r24
     776:	21 f4       	brne	.+8      	; 0x780 <LD_enuInit+0x9e>
     778:	8c 81       	ldd	r24, Y+4	; 0x04
     77a:	88 23       	and	r24, r24
     77c:	09 f4       	brne	.+2      	; 0x780 <LD_enuInit+0x9e>
		Local_enuErrorStatus = ES_OK;
     77e:	1a 82       	std	Y+2, r1	; 0x02

	return Local_enuErrorStatus;
     780:	8a 81       	ldd	r24, Y+2	; 0x02
}
     782:	0f 90       	pop	r0
     784:	0f 90       	pop	r0
     786:	0f 90       	pop	r0
     788:	0f 90       	pop	r0
     78a:	cf 91       	pop	r28
     78c:	df 91       	pop	r29
     78e:	08 95       	ret

00000790 <LD_enuSetState>:

ES_t LD_enuSetState(u8 Copy_u8LD_Num ,u8 Copy_u8LDSetValue)
{
     790:	df 93       	push	r29
     792:	cf 93       	push	r28
     794:	00 d0       	rcall	.+0      	; 0x796 <LD_enuSetState+0x6>
     796:	0f 92       	push	r0
     798:	cd b7       	in	r28, 0x3d	; 61
     79a:	de b7       	in	r29, 0x3e	; 62
     79c:	8a 83       	std	Y+2, r24	; 0x02
     79e:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorStatus = ES_NOK ;
     7a0:	81 e0       	ldi	r24, 0x01	; 1
     7a2:	89 83       	std	Y+1, r24	; 0x01

	if( ( ( Copy_u8LD_Num -= LD_ZERO ) < LD_u8LD_MaxNum ) &&
     7a4:	8a 81       	ldd	r24, Y+2	; 0x02
     7a6:	8e 51       	subi	r24, 0x1E	; 30
     7a8:	8a 83       	std	Y+2, r24	; 0x02
     7aa:	90 91 84 00 	lds	r25, 0x0084
     7ae:	8a 81       	ldd	r24, Y+2	; 0x02
     7b0:	89 17       	cp	r24, r25
     7b2:	f8 f4       	brcc	.+62     	; 0x7f2 <LD_enuSetState+0x62>
     7b4:	8b 81       	ldd	r24, Y+3	; 0x03
     7b6:	81 30       	cpi	r24, 0x01	; 1
     7b8:	19 f0       	breq	.+6      	; 0x7c0 <LD_enuSetState+0x30>
     7ba:	8b 81       	ldd	r24, Y+3	; 0x03
     7bc:	88 23       	and	r24, r24
     7be:	c9 f4       	brne	.+50     	; 0x7f2 <LD_enuSetState+0x62>
		( Copy_u8LDSetValue == LD_u8ON || Copy_u8LDSetValue == LD_u8OFF ) )
	{
		Local_enuErrorStatus = DIO_enuSetPinValue(LD[Copy_u8LD_Num].LD_Grp , LD[Copy_u8LD_Num].LD_Pin , Copy_u8LDSetValue);
     7c0:	8a 81       	ldd	r24, Y+2	; 0x02
     7c2:	88 2f       	mov	r24, r24
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	88 0f       	add	r24, r24
     7c8:	99 1f       	adc	r25, r25
     7ca:	fc 01       	movw	r30, r24
     7cc:	eb 57       	subi	r30, 0x7B	; 123
     7ce:	ff 4f       	sbci	r31, 0xFF	; 255
     7d0:	20 81       	ld	r18, Z
     7d2:	8a 81       	ldd	r24, Y+2	; 0x02
     7d4:	88 2f       	mov	r24, r24
     7d6:	90 e0       	ldi	r25, 0x00	; 0
     7d8:	88 0f       	add	r24, r24
     7da:	99 1f       	adc	r25, r25
     7dc:	fc 01       	movw	r30, r24
     7de:	ea 57       	subi	r30, 0x7A	; 122
     7e0:	ff 4f       	sbci	r31, 0xFF	; 255
     7e2:	90 81       	ld	r25, Z
     7e4:	82 2f       	mov	r24, r18
     7e6:	69 2f       	mov	r22, r25
     7e8:	4b 81       	ldd	r20, Y+3	; 0x03
     7ea:	0e 94 f9 04 	call	0x9f2	; 0x9f2 <DIO_enuSetPinValue>
     7ee:	89 83       	std	Y+1, r24	; 0x01
     7f0:	02 c0       	rjmp	.+4      	; 0x7f6 <LD_enuSetState+0x66>
	}
	else Local_enuErrorStatus = ES_OUT_RANGE;
     7f2:	82 e0       	ldi	r24, 0x02	; 2
     7f4:	89 83       	std	Y+1, r24	; 0x01


	return Local_enuErrorStatus;
     7f6:	89 81       	ldd	r24, Y+1	; 0x01
}
     7f8:	0f 90       	pop	r0
     7fa:	0f 90       	pop	r0
     7fc:	0f 90       	pop	r0
     7fe:	cf 91       	pop	r28
     800:	df 91       	pop	r29
     802:	08 95       	ret

00000804 <DIO_enuInit>:
#include "DIO_config.h"
#include "DIO_priv.h"


ES_t DIO_enuInit(void)
{
     804:	df 93       	push	r29
     806:	cf 93       	push	r28
     808:	0f 92       	push	r0
     80a:	cd b7       	in	r28, 0x3d	; 61
     80c:	de b7       	in	r29, 0x3e	; 62
	ES_t Local_enuErrorState = ES_OK;
     80e:	19 82       	std	Y+1, r1	; 0x01

	//

	return Local_enuErrorState ;
     810:	89 81       	ldd	r24, Y+1	; 0x01
}
     812:	0f 90       	pop	r0
     814:	cf 91       	pop	r28
     816:	df 91       	pop	r29
     818:	08 95       	ret

0000081a <DIO_enuSetPinDirection>:

ES_t DIO_enuSetPinDirection(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Direction)
{
     81a:	df 93       	push	r29
     81c:	cf 93       	push	r28
     81e:	00 d0       	rcall	.+0      	; 0x820 <DIO_enuSetPinDirection+0x6>
     820:	00 d0       	rcall	.+0      	; 0x822 <DIO_enuSetPinDirection+0x8>
     822:	00 d0       	rcall	.+0      	; 0x824 <DIO_enuSetPinDirection+0xa>
     824:	cd b7       	in	r28, 0x3d	; 61
     826:	de b7       	in	r29, 0x3e	; 62
     828:	8a 83       	std	Y+2, r24	; 0x02
     82a:	6b 83       	std	Y+3, r22	; 0x03
     82c:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     82e:	81 e0       	ldi	r24, 0x01	; 1
     830:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
     832:	8a 81       	ldd	r24, Y+2	; 0x02
     834:	84 30       	cpi	r24, 0x04	; 4
     836:	08 f0       	brcs	.+2      	; 0x83a <DIO_enuSetPinDirection+0x20>
     838:	d0 c0       	rjmp	.+416    	; 0x9da <__stack+0x17b>
     83a:	8b 81       	ldd	r24, Y+3	; 0x03
     83c:	88 30       	cpi	r24, 0x08	; 8
     83e:	08 f0       	brcs	.+2      	; 0x842 <DIO_enuSetPinDirection+0x28>
     840:	cc c0       	rjmp	.+408    	; 0x9da <__stack+0x17b>
     842:	8c 81       	ldd	r24, Y+4	; 0x04
     844:	82 30       	cpi	r24, 0x02	; 2
     846:	08 f0       	brcs	.+2      	; 0x84a <DIO_enuSetPinDirection+0x30>
     848:	c8 c0       	rjmp	.+400    	; 0x9da <__stack+0x17b>
			Copy_u8PinID <= DIO_u8PIN7 &&
			Copy_u8Direction <= DIO_u8OUTPUT )
	{
		switch (Copy_u8GroupID)
     84a:	8a 81       	ldd	r24, Y+2	; 0x02
     84c:	28 2f       	mov	r18, r24
     84e:	30 e0       	ldi	r19, 0x00	; 0
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	2d 83       	std	Y+5, r18	; 0x05
     854:	6d 81       	ldd	r22, Y+5	; 0x05
     856:	7e 81       	ldd	r23, Y+6	; 0x06
     858:	61 30       	cpi	r22, 0x01	; 1
     85a:	71 05       	cpc	r23, r1
     85c:	09 f4       	brne	.+2      	; 0x860 <__stack+0x1>
     85e:	41 c0       	rjmp	.+130    	; 0x8e2 <__stack+0x83>
     860:	8d 81       	ldd	r24, Y+5	; 0x05
     862:	9e 81       	ldd	r25, Y+6	; 0x06
     864:	82 30       	cpi	r24, 0x02	; 2
     866:	91 05       	cpc	r25, r1
     868:	34 f4       	brge	.+12     	; 0x876 <__stack+0x17>
     86a:	2d 81       	ldd	r18, Y+5	; 0x05
     86c:	3e 81       	ldd	r19, Y+6	; 0x06
     86e:	21 15       	cp	r18, r1
     870:	31 05       	cpc	r19, r1
     872:	71 f0       	breq	.+28     	; 0x890 <__stack+0x31>
     874:	b0 c0       	rjmp	.+352    	; 0x9d6 <__stack+0x177>
     876:	6d 81       	ldd	r22, Y+5	; 0x05
     878:	7e 81       	ldd	r23, Y+6	; 0x06
     87a:	62 30       	cpi	r22, 0x02	; 2
     87c:	71 05       	cpc	r23, r1
     87e:	09 f4       	brne	.+2      	; 0x882 <__stack+0x23>
     880:	59 c0       	rjmp	.+178    	; 0x934 <__stack+0xd5>
     882:	8d 81       	ldd	r24, Y+5	; 0x05
     884:	9e 81       	ldd	r25, Y+6	; 0x06
     886:	83 30       	cpi	r24, 0x03	; 3
     888:	91 05       	cpc	r25, r1
     88a:	09 f4       	brne	.+2      	; 0x88e <__stack+0x2f>
     88c:	7c c0       	rjmp	.+248    	; 0x986 <__stack+0x127>
     88e:	a3 c0       	rjmp	.+326    	; 0x9d6 <__stack+0x177>
		{
		case DIO_u8GROUP_A:
			DDRA &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
     890:	aa e3       	ldi	r26, 0x3A	; 58
     892:	b0 e0       	ldi	r27, 0x00	; 0
     894:	ea e3       	ldi	r30, 0x3A	; 58
     896:	f0 e0       	ldi	r31, 0x00	; 0
     898:	80 81       	ld	r24, Z
     89a:	48 2f       	mov	r20, r24
     89c:	8b 81       	ldd	r24, Y+3	; 0x03
     89e:	28 2f       	mov	r18, r24
     8a0:	30 e0       	ldi	r19, 0x00	; 0
     8a2:	81 e0       	ldi	r24, 0x01	; 1
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	02 c0       	rjmp	.+4      	; 0x8ac <__stack+0x4d>
     8a8:	88 0f       	add	r24, r24
     8aa:	99 1f       	adc	r25, r25
     8ac:	2a 95       	dec	r18
     8ae:	e2 f7       	brpl	.-8      	; 0x8a8 <__stack+0x49>
     8b0:	80 95       	com	r24
     8b2:	84 23       	and	r24, r20
     8b4:	8c 93       	st	X, r24
			DDRA |=  (Copy_u8Direction <<   Copy_u8PinID );
     8b6:	aa e3       	ldi	r26, 0x3A	; 58
     8b8:	b0 e0       	ldi	r27, 0x00	; 0
     8ba:	ea e3       	ldi	r30, 0x3A	; 58
     8bc:	f0 e0       	ldi	r31, 0x00	; 0
     8be:	80 81       	ld	r24, Z
     8c0:	48 2f       	mov	r20, r24
     8c2:	8c 81       	ldd	r24, Y+4	; 0x04
     8c4:	28 2f       	mov	r18, r24
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	8b 81       	ldd	r24, Y+3	; 0x03
     8ca:	88 2f       	mov	r24, r24
     8cc:	90 e0       	ldi	r25, 0x00	; 0
     8ce:	b9 01       	movw	r22, r18
     8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <__stack+0x77>
     8d2:	66 0f       	add	r22, r22
     8d4:	77 1f       	adc	r23, r23
     8d6:	8a 95       	dec	r24
     8d8:	e2 f7       	brpl	.-8      	; 0x8d2 <__stack+0x73>
     8da:	cb 01       	movw	r24, r22
     8dc:	84 2b       	or	r24, r20
     8de:	8c 93       	st	X, r24
     8e0:	7a c0       	rjmp	.+244    	; 0x9d6 <__stack+0x177>
			break;
		case DIO_u8GROUP_B:
			DDRB &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
     8e2:	a7 e3       	ldi	r26, 0x37	; 55
     8e4:	b0 e0       	ldi	r27, 0x00	; 0
     8e6:	e7 e3       	ldi	r30, 0x37	; 55
     8e8:	f0 e0       	ldi	r31, 0x00	; 0
     8ea:	80 81       	ld	r24, Z
     8ec:	48 2f       	mov	r20, r24
     8ee:	8b 81       	ldd	r24, Y+3	; 0x03
     8f0:	28 2f       	mov	r18, r24
     8f2:	30 e0       	ldi	r19, 0x00	; 0
     8f4:	81 e0       	ldi	r24, 0x01	; 1
     8f6:	90 e0       	ldi	r25, 0x00	; 0
     8f8:	02 c0       	rjmp	.+4      	; 0x8fe <__stack+0x9f>
     8fa:	88 0f       	add	r24, r24
     8fc:	99 1f       	adc	r25, r25
     8fe:	2a 95       	dec	r18
     900:	e2 f7       	brpl	.-8      	; 0x8fa <__stack+0x9b>
     902:	80 95       	com	r24
     904:	84 23       	and	r24, r20
     906:	8c 93       	st	X, r24
			DDRB |=  (Copy_u8Direction <<   Copy_u8PinID );
     908:	a7 e3       	ldi	r26, 0x37	; 55
     90a:	b0 e0       	ldi	r27, 0x00	; 0
     90c:	e7 e3       	ldi	r30, 0x37	; 55
     90e:	f0 e0       	ldi	r31, 0x00	; 0
     910:	80 81       	ld	r24, Z
     912:	48 2f       	mov	r20, r24
     914:	8c 81       	ldd	r24, Y+4	; 0x04
     916:	28 2f       	mov	r18, r24
     918:	30 e0       	ldi	r19, 0x00	; 0
     91a:	8b 81       	ldd	r24, Y+3	; 0x03
     91c:	88 2f       	mov	r24, r24
     91e:	90 e0       	ldi	r25, 0x00	; 0
     920:	b9 01       	movw	r22, r18
     922:	02 c0       	rjmp	.+4      	; 0x928 <__stack+0xc9>
     924:	66 0f       	add	r22, r22
     926:	77 1f       	adc	r23, r23
     928:	8a 95       	dec	r24
     92a:	e2 f7       	brpl	.-8      	; 0x924 <__stack+0xc5>
     92c:	cb 01       	movw	r24, r22
     92e:	84 2b       	or	r24, r20
     930:	8c 93       	st	X, r24
     932:	51 c0       	rjmp	.+162    	; 0x9d6 <__stack+0x177>
			break;
		case DIO_u8GROUP_C:
			DDRC &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
     934:	a4 e3       	ldi	r26, 0x34	; 52
     936:	b0 e0       	ldi	r27, 0x00	; 0
     938:	e4 e3       	ldi	r30, 0x34	; 52
     93a:	f0 e0       	ldi	r31, 0x00	; 0
     93c:	80 81       	ld	r24, Z
     93e:	48 2f       	mov	r20, r24
     940:	8b 81       	ldd	r24, Y+3	; 0x03
     942:	28 2f       	mov	r18, r24
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	81 e0       	ldi	r24, 0x01	; 1
     948:	90 e0       	ldi	r25, 0x00	; 0
     94a:	02 c0       	rjmp	.+4      	; 0x950 <__stack+0xf1>
     94c:	88 0f       	add	r24, r24
     94e:	99 1f       	adc	r25, r25
     950:	2a 95       	dec	r18
     952:	e2 f7       	brpl	.-8      	; 0x94c <__stack+0xed>
     954:	80 95       	com	r24
     956:	84 23       	and	r24, r20
     958:	8c 93       	st	X, r24
			DDRC |=  (Copy_u8Direction <<   Copy_u8PinID );
     95a:	a4 e3       	ldi	r26, 0x34	; 52
     95c:	b0 e0       	ldi	r27, 0x00	; 0
     95e:	e4 e3       	ldi	r30, 0x34	; 52
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	80 81       	ld	r24, Z
     964:	48 2f       	mov	r20, r24
     966:	8c 81       	ldd	r24, Y+4	; 0x04
     968:	28 2f       	mov	r18, r24
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	8b 81       	ldd	r24, Y+3	; 0x03
     96e:	88 2f       	mov	r24, r24
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	b9 01       	movw	r22, r18
     974:	02 c0       	rjmp	.+4      	; 0x97a <__stack+0x11b>
     976:	66 0f       	add	r22, r22
     978:	77 1f       	adc	r23, r23
     97a:	8a 95       	dec	r24
     97c:	e2 f7       	brpl	.-8      	; 0x976 <__stack+0x117>
     97e:	cb 01       	movw	r24, r22
     980:	84 2b       	or	r24, r20
     982:	8c 93       	st	X, r24
     984:	28 c0       	rjmp	.+80     	; 0x9d6 <__stack+0x177>
			break;
		case DIO_u8GROUP_D:
			DDRD &= ~(DIO_BIT_MASK     <<   Copy_u8PinID);
     986:	a1 e3       	ldi	r26, 0x31	; 49
     988:	b0 e0       	ldi	r27, 0x00	; 0
     98a:	e1 e3       	ldi	r30, 0x31	; 49
     98c:	f0 e0       	ldi	r31, 0x00	; 0
     98e:	80 81       	ld	r24, Z
     990:	48 2f       	mov	r20, r24
     992:	8b 81       	ldd	r24, Y+3	; 0x03
     994:	28 2f       	mov	r18, r24
     996:	30 e0       	ldi	r19, 0x00	; 0
     998:	81 e0       	ldi	r24, 0x01	; 1
     99a:	90 e0       	ldi	r25, 0x00	; 0
     99c:	02 c0       	rjmp	.+4      	; 0x9a2 <__stack+0x143>
     99e:	88 0f       	add	r24, r24
     9a0:	99 1f       	adc	r25, r25
     9a2:	2a 95       	dec	r18
     9a4:	e2 f7       	brpl	.-8      	; 0x99e <__stack+0x13f>
     9a6:	80 95       	com	r24
     9a8:	84 23       	and	r24, r20
     9aa:	8c 93       	st	X, r24
			DDRD |=  (Copy_u8Direction <<   Copy_u8PinID );
     9ac:	a1 e3       	ldi	r26, 0x31	; 49
     9ae:	b0 e0       	ldi	r27, 0x00	; 0
     9b0:	e1 e3       	ldi	r30, 0x31	; 49
     9b2:	f0 e0       	ldi	r31, 0x00	; 0
     9b4:	80 81       	ld	r24, Z
     9b6:	48 2f       	mov	r20, r24
     9b8:	8c 81       	ldd	r24, Y+4	; 0x04
     9ba:	28 2f       	mov	r18, r24
     9bc:	30 e0       	ldi	r19, 0x00	; 0
     9be:	8b 81       	ldd	r24, Y+3	; 0x03
     9c0:	88 2f       	mov	r24, r24
     9c2:	90 e0       	ldi	r25, 0x00	; 0
     9c4:	b9 01       	movw	r22, r18
     9c6:	02 c0       	rjmp	.+4      	; 0x9cc <__stack+0x16d>
     9c8:	66 0f       	add	r22, r22
     9ca:	77 1f       	adc	r23, r23
     9cc:	8a 95       	dec	r24
     9ce:	e2 f7       	brpl	.-8      	; 0x9c8 <__stack+0x169>
     9d0:	cb 01       	movw	r24, r22
     9d2:	84 2b       	or	r24, r20
     9d4:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
     9d6:	19 82       	std	Y+1, r1	; 0x01
     9d8:	02 c0       	rjmp	.+4      	; 0x9de <__stack+0x17f>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
     9da:	82 e0       	ldi	r24, 0x02	; 2
     9dc:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
     9de:	89 81       	ldd	r24, Y+1	; 0x01
}
     9e0:	26 96       	adiw	r28, 0x06	; 6
     9e2:	0f b6       	in	r0, 0x3f	; 63
     9e4:	f8 94       	cli
     9e6:	de bf       	out	0x3e, r29	; 62
     9e8:	0f be       	out	0x3f, r0	; 63
     9ea:	cd bf       	out	0x3d, r28	; 61
     9ec:	cf 91       	pop	r28
     9ee:	df 91       	pop	r29
     9f0:	08 95       	ret

000009f2 <DIO_enuSetPinValue>:

ES_t DIO_enuSetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 Copy_u8Value)
{
     9f2:	df 93       	push	r29
     9f4:	cf 93       	push	r28
     9f6:	00 d0       	rcall	.+0      	; 0x9f8 <DIO_enuSetPinValue+0x6>
     9f8:	00 d0       	rcall	.+0      	; 0x9fa <DIO_enuSetPinValue+0x8>
     9fa:	00 d0       	rcall	.+0      	; 0x9fc <DIO_enuSetPinValue+0xa>
     9fc:	cd b7       	in	r28, 0x3d	; 61
     9fe:	de b7       	in	r29, 0x3e	; 62
     a00:	8a 83       	std	Y+2, r24	; 0x02
     a02:	6b 83       	std	Y+3, r22	; 0x03
     a04:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     a06:	81 e0       	ldi	r24, 0x01	; 1
     a08:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
     a0a:	8a 81       	ldd	r24, Y+2	; 0x02
     a0c:	84 30       	cpi	r24, 0x04	; 4
     a0e:	08 f0       	brcs	.+2      	; 0xa12 <DIO_enuSetPinValue+0x20>
     a10:	d3 c0       	rjmp	.+422    	; 0xbb8 <DIO_enuSetPinValue+0x1c6>
     a12:	8b 81       	ldd	r24, Y+3	; 0x03
     a14:	88 30       	cpi	r24, 0x08	; 8
     a16:	08 f0       	brcs	.+2      	; 0xa1a <DIO_enuSetPinValue+0x28>
     a18:	cf c0       	rjmp	.+414    	; 0xbb8 <DIO_enuSetPinValue+0x1c6>
     a1a:	8c 81       	ldd	r24, Y+4	; 0x04
     a1c:	82 30       	cpi	r24, 0x02	; 2
     a1e:	20 f0       	brcs	.+8      	; 0xa28 <DIO_enuSetPinValue+0x36>
     a20:	8c 81       	ldd	r24, Y+4	; 0x04
     a22:	82 30       	cpi	r24, 0x02	; 2
     a24:	08 f0       	brcs	.+2      	; 0xa28 <DIO_enuSetPinValue+0x36>
     a26:	c8 c0       	rjmp	.+400    	; 0xbb8 <DIO_enuSetPinValue+0x1c6>
			Copy_u8PinID <= DIO_u8PIN7 &&
			(Copy_u8Value <= DIO_u8HIGH || Copy_u8Value <= DIO_u8PULL_UP ) )
	{
		switch (Copy_u8GroupID)
     a28:	8a 81       	ldd	r24, Y+2	; 0x02
     a2a:	28 2f       	mov	r18, r24
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	3e 83       	std	Y+6, r19	; 0x06
     a30:	2d 83       	std	Y+5, r18	; 0x05
     a32:	6d 81       	ldd	r22, Y+5	; 0x05
     a34:	7e 81       	ldd	r23, Y+6	; 0x06
     a36:	61 30       	cpi	r22, 0x01	; 1
     a38:	71 05       	cpc	r23, r1
     a3a:	09 f4       	brne	.+2      	; 0xa3e <DIO_enuSetPinValue+0x4c>
     a3c:	41 c0       	rjmp	.+130    	; 0xac0 <DIO_enuSetPinValue+0xce>
     a3e:	8d 81       	ldd	r24, Y+5	; 0x05
     a40:	9e 81       	ldd	r25, Y+6	; 0x06
     a42:	82 30       	cpi	r24, 0x02	; 2
     a44:	91 05       	cpc	r25, r1
     a46:	34 f4       	brge	.+12     	; 0xa54 <DIO_enuSetPinValue+0x62>
     a48:	2d 81       	ldd	r18, Y+5	; 0x05
     a4a:	3e 81       	ldd	r19, Y+6	; 0x06
     a4c:	21 15       	cp	r18, r1
     a4e:	31 05       	cpc	r19, r1
     a50:	71 f0       	breq	.+28     	; 0xa6e <DIO_enuSetPinValue+0x7c>
     a52:	b0 c0       	rjmp	.+352    	; 0xbb4 <DIO_enuSetPinValue+0x1c2>
     a54:	6d 81       	ldd	r22, Y+5	; 0x05
     a56:	7e 81       	ldd	r23, Y+6	; 0x06
     a58:	62 30       	cpi	r22, 0x02	; 2
     a5a:	71 05       	cpc	r23, r1
     a5c:	09 f4       	brne	.+2      	; 0xa60 <DIO_enuSetPinValue+0x6e>
     a5e:	59 c0       	rjmp	.+178    	; 0xb12 <DIO_enuSetPinValue+0x120>
     a60:	8d 81       	ldd	r24, Y+5	; 0x05
     a62:	9e 81       	ldd	r25, Y+6	; 0x06
     a64:	83 30       	cpi	r24, 0x03	; 3
     a66:	91 05       	cpc	r25, r1
     a68:	09 f4       	brne	.+2      	; 0xa6c <DIO_enuSetPinValue+0x7a>
     a6a:	7c c0       	rjmp	.+248    	; 0xb64 <DIO_enuSetPinValue+0x172>
     a6c:	a3 c0       	rjmp	.+326    	; 0xbb4 <DIO_enuSetPinValue+0x1c2>
		{
		case DIO_u8GROUP_A:
			PORTA &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
     a6e:	ab e3       	ldi	r26, 0x3B	; 59
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	eb e3       	ldi	r30, 0x3B	; 59
     a74:	f0 e0       	ldi	r31, 0x00	; 0
     a76:	80 81       	ld	r24, Z
     a78:	48 2f       	mov	r20, r24
     a7a:	8b 81       	ldd	r24, Y+3	; 0x03
     a7c:	28 2f       	mov	r18, r24
     a7e:	30 e0       	ldi	r19, 0x00	; 0
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	90 e0       	ldi	r25, 0x00	; 0
     a84:	02 c0       	rjmp	.+4      	; 0xa8a <DIO_enuSetPinValue+0x98>
     a86:	88 0f       	add	r24, r24
     a88:	99 1f       	adc	r25, r25
     a8a:	2a 95       	dec	r18
     a8c:	e2 f7       	brpl	.-8      	; 0xa86 <DIO_enuSetPinValue+0x94>
     a8e:	80 95       	com	r24
     a90:	84 23       	and	r24, r20
     a92:	8c 93       	st	X, r24
			PORTA |=  (Copy_u8Value <<   Copy_u8PinID );
     a94:	ab e3       	ldi	r26, 0x3B	; 59
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	eb e3       	ldi	r30, 0x3B	; 59
     a9a:	f0 e0       	ldi	r31, 0x00	; 0
     a9c:	80 81       	ld	r24, Z
     a9e:	48 2f       	mov	r20, r24
     aa0:	8c 81       	ldd	r24, Y+4	; 0x04
     aa2:	28 2f       	mov	r18, r24
     aa4:	30 e0       	ldi	r19, 0x00	; 0
     aa6:	8b 81       	ldd	r24, Y+3	; 0x03
     aa8:	88 2f       	mov	r24, r24
     aaa:	90 e0       	ldi	r25, 0x00	; 0
     aac:	b9 01       	movw	r22, r18
     aae:	02 c0       	rjmp	.+4      	; 0xab4 <DIO_enuSetPinValue+0xc2>
     ab0:	66 0f       	add	r22, r22
     ab2:	77 1f       	adc	r23, r23
     ab4:	8a 95       	dec	r24
     ab6:	e2 f7       	brpl	.-8      	; 0xab0 <DIO_enuSetPinValue+0xbe>
     ab8:	cb 01       	movw	r24, r22
     aba:	84 2b       	or	r24, r20
     abc:	8c 93       	st	X, r24
     abe:	7a c0       	rjmp	.+244    	; 0xbb4 <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_B:
			PORTB &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
     ac0:	a8 e3       	ldi	r26, 0x38	; 56
     ac2:	b0 e0       	ldi	r27, 0x00	; 0
     ac4:	e8 e3       	ldi	r30, 0x38	; 56
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	80 81       	ld	r24, Z
     aca:	48 2f       	mov	r20, r24
     acc:	8b 81       	ldd	r24, Y+3	; 0x03
     ace:	28 2f       	mov	r18, r24
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	81 e0       	ldi	r24, 0x01	; 1
     ad4:	90 e0       	ldi	r25, 0x00	; 0
     ad6:	02 c0       	rjmp	.+4      	; 0xadc <DIO_enuSetPinValue+0xea>
     ad8:	88 0f       	add	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	2a 95       	dec	r18
     ade:	e2 f7       	brpl	.-8      	; 0xad8 <DIO_enuSetPinValue+0xe6>
     ae0:	80 95       	com	r24
     ae2:	84 23       	and	r24, r20
     ae4:	8c 93       	st	X, r24
			PORTB |=  (Copy_u8Value <<   Copy_u8PinID );
     ae6:	a8 e3       	ldi	r26, 0x38	; 56
     ae8:	b0 e0       	ldi	r27, 0x00	; 0
     aea:	e8 e3       	ldi	r30, 0x38	; 56
     aec:	f0 e0       	ldi	r31, 0x00	; 0
     aee:	80 81       	ld	r24, Z
     af0:	48 2f       	mov	r20, r24
     af2:	8c 81       	ldd	r24, Y+4	; 0x04
     af4:	28 2f       	mov	r18, r24
     af6:	30 e0       	ldi	r19, 0x00	; 0
     af8:	8b 81       	ldd	r24, Y+3	; 0x03
     afa:	88 2f       	mov	r24, r24
     afc:	90 e0       	ldi	r25, 0x00	; 0
     afe:	b9 01       	movw	r22, r18
     b00:	02 c0       	rjmp	.+4      	; 0xb06 <DIO_enuSetPinValue+0x114>
     b02:	66 0f       	add	r22, r22
     b04:	77 1f       	adc	r23, r23
     b06:	8a 95       	dec	r24
     b08:	e2 f7       	brpl	.-8      	; 0xb02 <DIO_enuSetPinValue+0x110>
     b0a:	cb 01       	movw	r24, r22
     b0c:	84 2b       	or	r24, r20
     b0e:	8c 93       	st	X, r24
     b10:	51 c0       	rjmp	.+162    	; 0xbb4 <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_C:
			PORTC &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
     b12:	a5 e3       	ldi	r26, 0x35	; 53
     b14:	b0 e0       	ldi	r27, 0x00	; 0
     b16:	e5 e3       	ldi	r30, 0x35	; 53
     b18:	f0 e0       	ldi	r31, 0x00	; 0
     b1a:	80 81       	ld	r24, Z
     b1c:	48 2f       	mov	r20, r24
     b1e:	8b 81       	ldd	r24, Y+3	; 0x03
     b20:	28 2f       	mov	r18, r24
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	81 e0       	ldi	r24, 0x01	; 1
     b26:	90 e0       	ldi	r25, 0x00	; 0
     b28:	02 c0       	rjmp	.+4      	; 0xb2e <DIO_enuSetPinValue+0x13c>
     b2a:	88 0f       	add	r24, r24
     b2c:	99 1f       	adc	r25, r25
     b2e:	2a 95       	dec	r18
     b30:	e2 f7       	brpl	.-8      	; 0xb2a <DIO_enuSetPinValue+0x138>
     b32:	80 95       	com	r24
     b34:	84 23       	and	r24, r20
     b36:	8c 93       	st	X, r24
			PORTC |=  (Copy_u8Value <<   Copy_u8PinID );
     b38:	a5 e3       	ldi	r26, 0x35	; 53
     b3a:	b0 e0       	ldi	r27, 0x00	; 0
     b3c:	e5 e3       	ldi	r30, 0x35	; 53
     b3e:	f0 e0       	ldi	r31, 0x00	; 0
     b40:	80 81       	ld	r24, Z
     b42:	48 2f       	mov	r20, r24
     b44:	8c 81       	ldd	r24, Y+4	; 0x04
     b46:	28 2f       	mov	r18, r24
     b48:	30 e0       	ldi	r19, 0x00	; 0
     b4a:	8b 81       	ldd	r24, Y+3	; 0x03
     b4c:	88 2f       	mov	r24, r24
     b4e:	90 e0       	ldi	r25, 0x00	; 0
     b50:	b9 01       	movw	r22, r18
     b52:	02 c0       	rjmp	.+4      	; 0xb58 <DIO_enuSetPinValue+0x166>
     b54:	66 0f       	add	r22, r22
     b56:	77 1f       	adc	r23, r23
     b58:	8a 95       	dec	r24
     b5a:	e2 f7       	brpl	.-8      	; 0xb54 <DIO_enuSetPinValue+0x162>
     b5c:	cb 01       	movw	r24, r22
     b5e:	84 2b       	or	r24, r20
     b60:	8c 93       	st	X, r24
     b62:	28 c0       	rjmp	.+80     	; 0xbb4 <DIO_enuSetPinValue+0x1c2>
			break;
		case DIO_u8GROUP_D:
			PORTD &= ~(DIO_BIT_MASK <<   Copy_u8PinID);
     b64:	a2 e3       	ldi	r26, 0x32	; 50
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	e2 e3       	ldi	r30, 0x32	; 50
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	48 2f       	mov	r20, r24
     b70:	8b 81       	ldd	r24, Y+3	; 0x03
     b72:	28 2f       	mov	r18, r24
     b74:	30 e0       	ldi	r19, 0x00	; 0
     b76:	81 e0       	ldi	r24, 0x01	; 1
     b78:	90 e0       	ldi	r25, 0x00	; 0
     b7a:	02 c0       	rjmp	.+4      	; 0xb80 <DIO_enuSetPinValue+0x18e>
     b7c:	88 0f       	add	r24, r24
     b7e:	99 1f       	adc	r25, r25
     b80:	2a 95       	dec	r18
     b82:	e2 f7       	brpl	.-8      	; 0xb7c <DIO_enuSetPinValue+0x18a>
     b84:	80 95       	com	r24
     b86:	84 23       	and	r24, r20
     b88:	8c 93       	st	X, r24
			PORTD |=  (Copy_u8Value <<   Copy_u8PinID );
     b8a:	a2 e3       	ldi	r26, 0x32	; 50
     b8c:	b0 e0       	ldi	r27, 0x00	; 0
     b8e:	e2 e3       	ldi	r30, 0x32	; 50
     b90:	f0 e0       	ldi	r31, 0x00	; 0
     b92:	80 81       	ld	r24, Z
     b94:	48 2f       	mov	r20, r24
     b96:	8c 81       	ldd	r24, Y+4	; 0x04
     b98:	28 2f       	mov	r18, r24
     b9a:	30 e0       	ldi	r19, 0x00	; 0
     b9c:	8b 81       	ldd	r24, Y+3	; 0x03
     b9e:	88 2f       	mov	r24, r24
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	b9 01       	movw	r22, r18
     ba4:	02 c0       	rjmp	.+4      	; 0xbaa <DIO_enuSetPinValue+0x1b8>
     ba6:	66 0f       	add	r22, r22
     ba8:	77 1f       	adc	r23, r23
     baa:	8a 95       	dec	r24
     bac:	e2 f7       	brpl	.-8      	; 0xba6 <DIO_enuSetPinValue+0x1b4>
     bae:	cb 01       	movw	r24, r22
     bb0:	84 2b       	or	r24, r20
     bb2:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
     bb4:	19 82       	std	Y+1, r1	; 0x01
     bb6:	02 c0       	rjmp	.+4      	; 0xbbc <DIO_enuSetPinValue+0x1ca>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
     bb8:	82 e0       	ldi	r24, 0x02	; 2
     bba:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
     bbc:	89 81       	ldd	r24, Y+1	; 0x01
}
     bbe:	26 96       	adiw	r28, 0x06	; 6
     bc0:	0f b6       	in	r0, 0x3f	; 63
     bc2:	f8 94       	cli
     bc4:	de bf       	out	0x3e, r29	; 62
     bc6:	0f be       	out	0x3f, r0	; 63
     bc8:	cd bf       	out	0x3d, r28	; 61
     bca:	cf 91       	pop	r28
     bcc:	df 91       	pop	r29
     bce:	08 95       	ret

00000bd0 <DIO_enuTogglePinValue>:


ES_t DIO_enuTogglePinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID)
{
     bd0:	df 93       	push	r29
     bd2:	cf 93       	push	r28
     bd4:	00 d0       	rcall	.+0      	; 0xbd6 <DIO_enuTogglePinValue+0x6>
     bd6:	00 d0       	rcall	.+0      	; 0xbd8 <DIO_enuTogglePinValue+0x8>
     bd8:	0f 92       	push	r0
     bda:	cd b7       	in	r28, 0x3d	; 61
     bdc:	de b7       	in	r29, 0x3e	; 62
     bde:	8a 83       	std	Y+2, r24	; 0x02
     be0:	6b 83       	std	Y+3, r22	; 0x03
	ES_t Local_enuErrorState = ES_NOK;
     be2:	81 e0       	ldi	r24, 0x01	; 1
     be4:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_u8GroupID <= DIO_u8GROUP_D &&
     be6:	8a 81       	ldd	r24, Y+2	; 0x02
     be8:	84 30       	cpi	r24, 0x04	; 4
     bea:	08 f0       	brcs	.+2      	; 0xbee <DIO_enuTogglePinValue+0x1e>
     bec:	74 c0       	rjmp	.+232    	; 0xcd6 <DIO_enuTogglePinValue+0x106>
     bee:	8b 81       	ldd	r24, Y+3	; 0x03
     bf0:	88 30       	cpi	r24, 0x08	; 8
     bf2:	08 f0       	brcs	.+2      	; 0xbf6 <DIO_enuTogglePinValue+0x26>
     bf4:	70 c0       	rjmp	.+224    	; 0xcd6 <DIO_enuTogglePinValue+0x106>
			Copy_u8PinID <= DIO_u8PIN7)
	{
		switch (Copy_u8GroupID)
     bf6:	8a 81       	ldd	r24, Y+2	; 0x02
     bf8:	28 2f       	mov	r18, r24
     bfa:	30 e0       	ldi	r19, 0x00	; 0
     bfc:	3d 83       	std	Y+5, r19	; 0x05
     bfe:	2c 83       	std	Y+4, r18	; 0x04
     c00:	8c 81       	ldd	r24, Y+4	; 0x04
     c02:	9d 81       	ldd	r25, Y+5	; 0x05
     c04:	81 30       	cpi	r24, 0x01	; 1
     c06:	91 05       	cpc	r25, r1
     c08:	49 f1       	breq	.+82     	; 0xc5c <DIO_enuTogglePinValue+0x8c>
     c0a:	2c 81       	ldd	r18, Y+4	; 0x04
     c0c:	3d 81       	ldd	r19, Y+5	; 0x05
     c0e:	22 30       	cpi	r18, 0x02	; 2
     c10:	31 05       	cpc	r19, r1
     c12:	2c f4       	brge	.+10     	; 0xc1e <DIO_enuTogglePinValue+0x4e>
     c14:	8c 81       	ldd	r24, Y+4	; 0x04
     c16:	9d 81       	ldd	r25, Y+5	; 0x05
     c18:	00 97       	sbiw	r24, 0x00	; 0
     c1a:	61 f0       	breq	.+24     	; 0xc34 <DIO_enuTogglePinValue+0x64>
     c1c:	5a c0       	rjmp	.+180    	; 0xcd2 <DIO_enuTogglePinValue+0x102>
     c1e:	2c 81       	ldd	r18, Y+4	; 0x04
     c20:	3d 81       	ldd	r19, Y+5	; 0x05
     c22:	22 30       	cpi	r18, 0x02	; 2
     c24:	31 05       	cpc	r19, r1
     c26:	71 f1       	breq	.+92     	; 0xc84 <DIO_enuTogglePinValue+0xb4>
     c28:	8c 81       	ldd	r24, Y+4	; 0x04
     c2a:	9d 81       	ldd	r25, Y+5	; 0x05
     c2c:	83 30       	cpi	r24, 0x03	; 3
     c2e:	91 05       	cpc	r25, r1
     c30:	e9 f1       	breq	.+122    	; 0xcac <DIO_enuTogglePinValue+0xdc>
     c32:	4f c0       	rjmp	.+158    	; 0xcd2 <DIO_enuTogglePinValue+0x102>
		{
		case DIO_u8GROUP_A:
			PORTA ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
     c34:	ab e3       	ldi	r26, 0x3B	; 59
     c36:	b0 e0       	ldi	r27, 0x00	; 0
     c38:	eb e3       	ldi	r30, 0x3B	; 59
     c3a:	f0 e0       	ldi	r31, 0x00	; 0
     c3c:	80 81       	ld	r24, Z
     c3e:	48 2f       	mov	r20, r24
     c40:	8b 81       	ldd	r24, Y+3	; 0x03
     c42:	28 2f       	mov	r18, r24
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	81 e0       	ldi	r24, 0x01	; 1
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	02 2e       	mov	r0, r18
     c4c:	02 c0       	rjmp	.+4      	; 0xc52 <DIO_enuTogglePinValue+0x82>
     c4e:	88 0f       	add	r24, r24
     c50:	99 1f       	adc	r25, r25
     c52:	0a 94       	dec	r0
     c54:	e2 f7       	brpl	.-8      	; 0xc4e <DIO_enuTogglePinValue+0x7e>
     c56:	84 27       	eor	r24, r20
     c58:	8c 93       	st	X, r24
     c5a:	3b c0       	rjmp	.+118    	; 0xcd2 <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_B:
			PORTB ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
     c5c:	a8 e3       	ldi	r26, 0x38	; 56
     c5e:	b0 e0       	ldi	r27, 0x00	; 0
     c60:	e8 e3       	ldi	r30, 0x38	; 56
     c62:	f0 e0       	ldi	r31, 0x00	; 0
     c64:	80 81       	ld	r24, Z
     c66:	48 2f       	mov	r20, r24
     c68:	8b 81       	ldd	r24, Y+3	; 0x03
     c6a:	28 2f       	mov	r18, r24
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	02 2e       	mov	r0, r18
     c74:	02 c0       	rjmp	.+4      	; 0xc7a <DIO_enuTogglePinValue+0xaa>
     c76:	88 0f       	add	r24, r24
     c78:	99 1f       	adc	r25, r25
     c7a:	0a 94       	dec	r0
     c7c:	e2 f7       	brpl	.-8      	; 0xc76 <DIO_enuTogglePinValue+0xa6>
     c7e:	84 27       	eor	r24, r20
     c80:	8c 93       	st	X, r24
     c82:	27 c0       	rjmp	.+78     	; 0xcd2 <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_C:
			PORTC ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
     c84:	a5 e3       	ldi	r26, 0x35	; 53
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e5 e3       	ldi	r30, 0x35	; 53
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	48 2f       	mov	r20, r24
     c90:	8b 81       	ldd	r24, Y+3	; 0x03
     c92:	28 2f       	mov	r18, r24
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	90 e0       	ldi	r25, 0x00	; 0
     c9a:	02 2e       	mov	r0, r18
     c9c:	02 c0       	rjmp	.+4      	; 0xca2 <DIO_enuTogglePinValue+0xd2>
     c9e:	88 0f       	add	r24, r24
     ca0:	99 1f       	adc	r25, r25
     ca2:	0a 94       	dec	r0
     ca4:	e2 f7       	brpl	.-8      	; 0xc9e <DIO_enuTogglePinValue+0xce>
     ca6:	84 27       	eor	r24, r20
     ca8:	8c 93       	st	X, r24
     caa:	13 c0       	rjmp	.+38     	; 0xcd2 <DIO_enuTogglePinValue+0x102>
			break;
		case DIO_u8GROUP_D:
			PORTD ^=  (DIO_BIT_MASK <<   Copy_u8PinID);
     cac:	a2 e3       	ldi	r26, 0x32	; 50
     cae:	b0 e0       	ldi	r27, 0x00	; 0
     cb0:	e2 e3       	ldi	r30, 0x32	; 50
     cb2:	f0 e0       	ldi	r31, 0x00	; 0
     cb4:	80 81       	ld	r24, Z
     cb6:	48 2f       	mov	r20, r24
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	28 2f       	mov	r18, r24
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	81 e0       	ldi	r24, 0x01	; 1
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	02 2e       	mov	r0, r18
     cc4:	02 c0       	rjmp	.+4      	; 0xcca <DIO_enuTogglePinValue+0xfa>
     cc6:	88 0f       	add	r24, r24
     cc8:	99 1f       	adc	r25, r25
     cca:	0a 94       	dec	r0
     ccc:	e2 f7       	brpl	.-8      	; 0xcc6 <DIO_enuTogglePinValue+0xf6>
     cce:	84 27       	eor	r24, r20
     cd0:	8c 93       	st	X, r24
			break;
		}
		Local_enuErrorState = ES_OK;
     cd2:	19 82       	std	Y+1, r1	; 0x01
     cd4:	02 c0       	rjmp	.+4      	; 0xcda <DIO_enuTogglePinValue+0x10a>
	}
	else
	{
		Local_enuErrorState = ES_OUT_RANGE;
     cd6:	82 e0       	ldi	r24, 0x02	; 2
     cd8:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
     cda:	89 81       	ldd	r24, Y+1	; 0x01
}
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	0f 90       	pop	r0
     ce4:	0f 90       	pop	r0
     ce6:	cf 91       	pop	r28
     ce8:	df 91       	pop	r29
     cea:	08 95       	ret

00000cec <DIO_enuGetPinValue>:

ES_t DIO_enuGetPinValue(u8 Copy_u8GroupID , u8 Copy_u8PinID , u8 *Copy_pu8Value)
{
     cec:	df 93       	push	r29
     cee:	cf 93       	push	r28
     cf0:	cd b7       	in	r28, 0x3d	; 61
     cf2:	de b7       	in	r29, 0x3e	; 62
     cf4:	27 97       	sbiw	r28, 0x07	; 7
     cf6:	0f b6       	in	r0, 0x3f	; 63
     cf8:	f8 94       	cli
     cfa:	de bf       	out	0x3e, r29	; 62
     cfc:	0f be       	out	0x3f, r0	; 63
     cfe:	cd bf       	out	0x3d, r28	; 61
     d00:	8a 83       	std	Y+2, r24	; 0x02
     d02:	6b 83       	std	Y+3, r22	; 0x03
     d04:	5d 83       	std	Y+5, r21	; 0x05
     d06:	4c 83       	std	Y+4, r20	; 0x04
	ES_t Local_enuErrorState = ES_NOK;
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	89 83       	std	Y+1, r24	; 0x01

	if (Copy_pu8Value != NULL)
     d0c:	8c 81       	ldd	r24, Y+4	; 0x04
     d0e:	9d 81       	ldd	r25, Y+5	; 0x05
     d10:	00 97       	sbiw	r24, 0x00	; 0
     d12:	09 f4       	brne	.+2      	; 0xd16 <DIO_enuGetPinValue+0x2a>
     d14:	7d c0       	rjmp	.+250    	; 0xe10 <DIO_enuGetPinValue+0x124>
	{
		if (Copy_u8GroupID <= DIO_u8GROUP_D &&
     d16:	8a 81       	ldd	r24, Y+2	; 0x02
     d18:	84 30       	cpi	r24, 0x04	; 4
     d1a:	08 f0       	brcs	.+2      	; 0xd1e <DIO_enuGetPinValue+0x32>
     d1c:	76 c0       	rjmp	.+236    	; 0xe0a <DIO_enuGetPinValue+0x11e>
     d1e:	8b 81       	ldd	r24, Y+3	; 0x03
     d20:	88 30       	cpi	r24, 0x08	; 8
     d22:	08 f0       	brcs	.+2      	; 0xd26 <DIO_enuGetPinValue+0x3a>
     d24:	72 c0       	rjmp	.+228    	; 0xe0a <DIO_enuGetPinValue+0x11e>
				Copy_u8PinID <= DIO_u8PIN7)
		{
			switch (Copy_u8GroupID)
     d26:	8a 81       	ldd	r24, Y+2	; 0x02
     d28:	28 2f       	mov	r18, r24
     d2a:	30 e0       	ldi	r19, 0x00	; 0
     d2c:	3f 83       	std	Y+7, r19	; 0x07
     d2e:	2e 83       	std	Y+6, r18	; 0x06
     d30:	4e 81       	ldd	r20, Y+6	; 0x06
     d32:	5f 81       	ldd	r21, Y+7	; 0x07
     d34:	41 30       	cpi	r20, 0x01	; 1
     d36:	51 05       	cpc	r21, r1
     d38:	59 f1       	breq	.+86     	; 0xd90 <DIO_enuGetPinValue+0xa4>
     d3a:	8e 81       	ldd	r24, Y+6	; 0x06
     d3c:	9f 81       	ldd	r25, Y+7	; 0x07
     d3e:	82 30       	cpi	r24, 0x02	; 2
     d40:	91 05       	cpc	r25, r1
     d42:	34 f4       	brge	.+12     	; 0xd50 <DIO_enuGetPinValue+0x64>
     d44:	2e 81       	ldd	r18, Y+6	; 0x06
     d46:	3f 81       	ldd	r19, Y+7	; 0x07
     d48:	21 15       	cp	r18, r1
     d4a:	31 05       	cpc	r19, r1
     d4c:	69 f0       	breq	.+26     	; 0xd68 <DIO_enuGetPinValue+0x7c>
     d4e:	5b c0       	rjmp	.+182    	; 0xe06 <DIO_enuGetPinValue+0x11a>
     d50:	4e 81       	ldd	r20, Y+6	; 0x06
     d52:	5f 81       	ldd	r21, Y+7	; 0x07
     d54:	42 30       	cpi	r20, 0x02	; 2
     d56:	51 05       	cpc	r21, r1
     d58:	79 f1       	breq	.+94     	; 0xdb8 <DIO_enuGetPinValue+0xcc>
     d5a:	8e 81       	ldd	r24, Y+6	; 0x06
     d5c:	9f 81       	ldd	r25, Y+7	; 0x07
     d5e:	83 30       	cpi	r24, 0x03	; 3
     d60:	91 05       	cpc	r25, r1
     d62:	09 f4       	brne	.+2      	; 0xd66 <DIO_enuGetPinValue+0x7a>
     d64:	3d c0       	rjmp	.+122    	; 0xde0 <DIO_enuGetPinValue+0xf4>
     d66:	4f c0       	rjmp	.+158    	; 0xe06 <DIO_enuGetPinValue+0x11a>
			{
			case DIO_u8GROUP_A:
				*Copy_pu8Value = ( ( PINA >> Copy_u8PinID ) & DIO_BIT_MASK );
     d68:	e9 e3       	ldi	r30, 0x39	; 57
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	28 2f       	mov	r18, r24
     d70:	30 e0       	ldi	r19, 0x00	; 0
     d72:	8b 81       	ldd	r24, Y+3	; 0x03
     d74:	88 2f       	mov	r24, r24
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	a9 01       	movw	r20, r18
     d7a:	02 c0       	rjmp	.+4      	; 0xd80 <DIO_enuGetPinValue+0x94>
     d7c:	55 95       	asr	r21
     d7e:	47 95       	ror	r20
     d80:	8a 95       	dec	r24
     d82:	e2 f7       	brpl	.-8      	; 0xd7c <DIO_enuGetPinValue+0x90>
     d84:	ca 01       	movw	r24, r20
     d86:	81 70       	andi	r24, 0x01	; 1
     d88:	ec 81       	ldd	r30, Y+4	; 0x04
     d8a:	fd 81       	ldd	r31, Y+5	; 0x05
     d8c:	80 83       	st	Z, r24
     d8e:	3b c0       	rjmp	.+118    	; 0xe06 <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_B:
				*Copy_pu8Value = ( ( PINB >> Copy_u8PinID ) & DIO_BIT_MASK );
     d90:	e6 e3       	ldi	r30, 0x36	; 54
     d92:	f0 e0       	ldi	r31, 0x00	; 0
     d94:	80 81       	ld	r24, Z
     d96:	28 2f       	mov	r18, r24
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	8b 81       	ldd	r24, Y+3	; 0x03
     d9c:	88 2f       	mov	r24, r24
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	a9 01       	movw	r20, r18
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <DIO_enuGetPinValue+0xbc>
     da4:	55 95       	asr	r21
     da6:	47 95       	ror	r20
     da8:	8a 95       	dec	r24
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <DIO_enuGetPinValue+0xb8>
     dac:	ca 01       	movw	r24, r20
     dae:	81 70       	andi	r24, 0x01	; 1
     db0:	ec 81       	ldd	r30, Y+4	; 0x04
     db2:	fd 81       	ldd	r31, Y+5	; 0x05
     db4:	80 83       	st	Z, r24
     db6:	27 c0       	rjmp	.+78     	; 0xe06 <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_C:
				*Copy_pu8Value = ( ( PINC >> Copy_u8PinID ) & DIO_BIT_MASK );
     db8:	e3 e3       	ldi	r30, 0x33	; 51
     dba:	f0 e0       	ldi	r31, 0x00	; 0
     dbc:	80 81       	ld	r24, Z
     dbe:	28 2f       	mov	r18, r24
     dc0:	30 e0       	ldi	r19, 0x00	; 0
     dc2:	8b 81       	ldd	r24, Y+3	; 0x03
     dc4:	88 2f       	mov	r24, r24
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	a9 01       	movw	r20, r18
     dca:	02 c0       	rjmp	.+4      	; 0xdd0 <DIO_enuGetPinValue+0xe4>
     dcc:	55 95       	asr	r21
     dce:	47 95       	ror	r20
     dd0:	8a 95       	dec	r24
     dd2:	e2 f7       	brpl	.-8      	; 0xdcc <DIO_enuGetPinValue+0xe0>
     dd4:	ca 01       	movw	r24, r20
     dd6:	81 70       	andi	r24, 0x01	; 1
     dd8:	ec 81       	ldd	r30, Y+4	; 0x04
     dda:	fd 81       	ldd	r31, Y+5	; 0x05
     ddc:	80 83       	st	Z, r24
     dde:	13 c0       	rjmp	.+38     	; 0xe06 <DIO_enuGetPinValue+0x11a>
				break;
			case DIO_u8GROUP_D:
				*Copy_pu8Value = ( ( PIND >> Copy_u8PinID ) & DIO_BIT_MASK );
     de0:	e0 e3       	ldi	r30, 0x30	; 48
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	28 2f       	mov	r18, r24
     de8:	30 e0       	ldi	r19, 0x00	; 0
     dea:	8b 81       	ldd	r24, Y+3	; 0x03
     dec:	88 2f       	mov	r24, r24
     dee:	90 e0       	ldi	r25, 0x00	; 0
     df0:	a9 01       	movw	r20, r18
     df2:	02 c0       	rjmp	.+4      	; 0xdf8 <DIO_enuGetPinValue+0x10c>
     df4:	55 95       	asr	r21
     df6:	47 95       	ror	r20
     df8:	8a 95       	dec	r24
     dfa:	e2 f7       	brpl	.-8      	; 0xdf4 <DIO_enuGetPinValue+0x108>
     dfc:	ca 01       	movw	r24, r20
     dfe:	81 70       	andi	r24, 0x01	; 1
     e00:	ec 81       	ldd	r30, Y+4	; 0x04
     e02:	fd 81       	ldd	r31, Y+5	; 0x05
     e04:	80 83       	st	Z, r24
				break;
			}
			Local_enuErrorState = ES_OK;
     e06:	19 82       	std	Y+1, r1	; 0x01
     e08:	05 c0       	rjmp	.+10     	; 0xe14 <DIO_enuGetPinValue+0x128>
		}
		else
		{
			Local_enuErrorState = ES_OUT_RANGE;
     e0a:	82 e0       	ldi	r24, 0x02	; 2
     e0c:	89 83       	std	Y+1, r24	; 0x01
     e0e:	02 c0       	rjmp	.+4      	; 0xe14 <DIO_enuGetPinValue+0x128>
		}
	}
	else
	{
		Local_enuErrorState = ES_NULL_POINTER;
     e10:	83 e0       	ldi	r24, 0x03	; 3
     e12:	89 83       	std	Y+1, r24	; 0x01
	}

	return Local_enuErrorState ;
     e14:	89 81       	ldd	r24, Y+1	; 0x01
}
     e16:	27 96       	adiw	r28, 0x07	; 7
     e18:	0f b6       	in	r0, 0x3f	; 63
     e1a:	f8 94       	cli
     e1c:	de bf       	out	0x3e, r29	; 62
     e1e:	0f be       	out	0x3f, r0	; 63
     e20:	cd bf       	out	0x3d, r28	; 61
     e22:	cf 91       	pop	r28
     e24:	df 91       	pop	r29
     e26:	08 95       	ret

00000e28 <TMU_vidInit>:

static TCB_t All_Tasks[MAX_TASKS];
static u32 TMU_u32OsTicks;

void TMU_vidInit(void)
{
     e28:	df 93       	push	r29
     e2a:	cf 93       	push	r28
     e2c:	cd b7       	in	r28, 0x3d	; 61
     e2e:	de b7       	in	r29, 0x3e	; 62
#if TIMER_CHANNEL == TIMER0
	TCCR0 = 0x0D;
     e30:	e3 e5       	ldi	r30, 0x53	; 83
     e32:	f0 e0       	ldi	r31, 0x00	; 0
     e34:	8d e0       	ldi	r24, 0x0D	; 13
     e36:	80 83       	st	Z, r24
	#if OS_TICK >0 && OS_TICK <= 16
		OCR0 = (u8)((OS_TICK * CPU_FREQ)/1024ul);
     e38:	ec e5       	ldi	r30, 0x5C	; 92
     e3a:	f0 e0       	ldi	r31, 0x00	; 0
     e3c:	8c e9       	ldi	r24, 0x9C	; 156
     e3e:	80 83       	st	Z, r24

		TMU_u8ISRNum = 1;
     e40:	81 e0       	ldi	r24, 0x01	; 1
     e42:	80 93 98 00 	sts	0x0098, r24
		TMU_u8ISRCount = 1;
     e46:	81 e0       	ldi	r24, 0x01	; 1
     e48:	80 93 99 00 	sts	0x0099, r24
		TIMSK |= (1<<1);
     e4c:	a9 e5       	ldi	r26, 0x59	; 89
     e4e:	b0 e0       	ldi	r27, 0x00	; 0
     e50:	e9 e5       	ldi	r30, 0x59	; 89
     e52:	f0 e0       	ldi	r31, 0x00	; 0
     e54:	80 81       	ld	r24, Z
     e56:	82 60       	ori	r24, 0x02	; 2
     e58:	8c 93       	st	X, r24
	#error os tick value is invalid
	#endif
#else
#error Timer channel configuration is invalid
#endif
}
     e5a:	cf 91       	pop	r28
     e5c:	df 91       	pop	r29
     e5e:	08 95       	ret

00000e60 <TMU_vidCreateTask>:


void TMU_vidCreateTask( void( *Copy_pFunAppFun )( void* ) , void *Copy_pvidParameter, u16 Copy_u16Periodicity , u8 Copy_u8Priority , u8 Copy_u8Offset)
{
     e60:	0f 93       	push	r16
     e62:	df 93       	push	r29
     e64:	cf 93       	push	r28
     e66:	cd b7       	in	r28, 0x3d	; 61
     e68:	de b7       	in	r29, 0x3e	; 62
     e6a:	28 97       	sbiw	r28, 0x08	; 8
     e6c:	0f b6       	in	r0, 0x3f	; 63
     e6e:	f8 94       	cli
     e70:	de bf       	out	0x3e, r29	; 62
     e72:	0f be       	out	0x3f, r0	; 63
     e74:	cd bf       	out	0x3d, r28	; 61
     e76:	9a 83       	std	Y+2, r25	; 0x02
     e78:	89 83       	std	Y+1, r24	; 0x01
     e7a:	7c 83       	std	Y+4, r23	; 0x04
     e7c:	6b 83       	std	Y+3, r22	; 0x03
     e7e:	5e 83       	std	Y+6, r21	; 0x06
     e80:	4d 83       	std	Y+5, r20	; 0x05
     e82:	2f 83       	std	Y+7, r18	; 0x07
     e84:	08 87       	std	Y+8, r16	; 0x08
	if (Copy_pFunAppFun != NULL && Copy_u8Priority < MAX_TASKS)
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	9a 81       	ldd	r25, Y+2	; 0x02
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	09 f4       	brne	.+2      	; 0xe90 <TMU_vidCreateTask+0x30>
     e8e:	52 c0       	rjmp	.+164    	; 0xf34 <TMU_vidCreateTask+0xd4>
     e90:	8f 81       	ldd	r24, Y+7	; 0x07
     e92:	87 30       	cpi	r24, 0x07	; 7
     e94:	08 f0       	brcs	.+2      	; 0xe98 <TMU_vidCreateTask+0x38>
     e96:	4e c0       	rjmp	.+156    	; 0xf34 <TMU_vidCreateTask+0xd4>
	{
		All_Tasks[ Copy_u8Priority ].pFun = Copy_pFunAppFun;
     e98:	8f 81       	ldd	r24, Y+7	; 0x07
     e9a:	88 2f       	mov	r24, r24
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	88 0f       	add	r24, r24
     ea0:	99 1f       	adc	r25, r25
     ea2:	88 0f       	add	r24, r24
     ea4:	99 1f       	adc	r25, r25
     ea6:	88 0f       	add	r24, r24
     ea8:	99 1f       	adc	r25, r25
     eaa:	fc 01       	movw	r30, r24
     eac:	e5 56       	subi	r30, 0x65	; 101
     eae:	ff 4f       	sbci	r31, 0xFF	; 255
     eb0:	89 81       	ldd	r24, Y+1	; 0x01
     eb2:	9a 81       	ldd	r25, Y+2	; 0x02
     eb4:	91 83       	std	Z+1, r25	; 0x01
     eb6:	80 83       	st	Z, r24
		All_Tasks[ Copy_u8Priority ].parameter = Copy_pvidParameter;
     eb8:	8f 81       	ldd	r24, Y+7	; 0x07
     eba:	88 2f       	mov	r24, r24
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	88 0f       	add	r24, r24
     ec0:	99 1f       	adc	r25, r25
     ec2:	88 0f       	add	r24, r24
     ec4:	99 1f       	adc	r25, r25
     ec6:	01 96       	adiw	r24, 0x01	; 1
     ec8:	88 0f       	add	r24, r24
     eca:	99 1f       	adc	r25, r25
     ecc:	fc 01       	movw	r30, r24
     ece:	e5 56       	subi	r30, 0x65	; 101
     ed0:	ff 4f       	sbci	r31, 0xFF	; 255
     ed2:	8b 81       	ldd	r24, Y+3	; 0x03
     ed4:	9c 81       	ldd	r25, Y+4	; 0x04
     ed6:	91 83       	std	Z+1, r25	; 0x01
     ed8:	80 83       	st	Z, r24
		All_Tasks[ Copy_u8Priority ].Periodicity = Copy_u16Periodicity;
     eda:	8f 81       	ldd	r24, Y+7	; 0x07
     edc:	88 2f       	mov	r24, r24
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	88 0f       	add	r24, r24
     ee2:	99 1f       	adc	r25, r25
     ee4:	01 96       	adiw	r24, 0x01	; 1
     ee6:	88 0f       	add	r24, r24
     ee8:	99 1f       	adc	r25, r25
     eea:	88 0f       	add	r24, r24
     eec:	99 1f       	adc	r25, r25
     eee:	fc 01       	movw	r30, r24
     ef0:	e5 56       	subi	r30, 0x65	; 101
     ef2:	ff 4f       	sbci	r31, 0xFF	; 255
     ef4:	8d 81       	ldd	r24, Y+5	; 0x05
     ef6:	9e 81       	ldd	r25, Y+6	; 0x06
     ef8:	91 83       	std	Z+1, r25	; 0x01
     efa:	80 83       	st	Z, r24
		All_Tasks[ Copy_u8Priority ].state = READY;
     efc:	8f 81       	ldd	r24, Y+7	; 0x07
     efe:	88 2f       	mov	r24, r24
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	88 0f       	add	r24, r24
     f08:	99 1f       	adc	r25, r25
     f0a:	88 0f       	add	r24, r24
     f0c:	99 1f       	adc	r25, r25
     f0e:	fc 01       	movw	r30, r24
     f10:	ef 55       	subi	r30, 0x5F	; 95
     f12:	ff 4f       	sbci	r31, 0xFF	; 255
     f14:	87 e1       	ldi	r24, 0x17	; 23
     f16:	80 83       	st	Z, r24
		All_Tasks[ Copy_u8Priority ].offset = Copy_u8Offset;
     f18:	8f 81       	ldd	r24, Y+7	; 0x07
     f1a:	88 2f       	mov	r24, r24
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	88 0f       	add	r24, r24
     f20:	99 1f       	adc	r25, r25
     f22:	88 0f       	add	r24, r24
     f24:	99 1f       	adc	r25, r25
     f26:	88 0f       	add	r24, r24
     f28:	99 1f       	adc	r25, r25
     f2a:	fc 01       	movw	r30, r24
     f2c:	ee 55       	subi	r30, 0x5E	; 94
     f2e:	ff 4f       	sbci	r31, 0xFF	; 255
     f30:	88 85       	ldd	r24, Y+8	; 0x08
     f32:	80 83       	st	Z, r24
	}
}
     f34:	28 96       	adiw	r28, 0x08	; 8
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	0f 91       	pop	r16
     f46:	08 95       	ret

00000f48 <TMU_vidStartScheduler>:

void TMU_vidStartScheduler(void)
{
     f48:	ef 92       	push	r14
     f4a:	ff 92       	push	r15
     f4c:	0f 93       	push	r16
     f4e:	1f 93       	push	r17
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	00 d0       	rcall	.+0      	; 0xf56 <TMU_vidStartScheduler+0xe>
     f56:	00 d0       	rcall	.+0      	; 0xf58 <TMU_vidStartScheduler+0x10>
     f58:	0f 92       	push	r0
     f5a:	cd b7       	in	r28, 0x3d	; 61
     f5c:	de b7       	in	r29, 0x3e	; 62
	u32 Temp = 0;
     f5e:	1a 82       	std	Y+2, r1	; 0x02
     f60:	1b 82       	std	Y+3, r1	; 0x03
     f62:	1c 82       	std	Y+4, r1	; 0x04
     f64:	1d 82       	std	Y+5, r1	; 0x05
	asm ("SEI");
     f66:	78 94       	sei
	while(1)
	{
		if (TMU_u32OsTicks > Temp)
     f68:	20 91 d3 00 	lds	r18, 0x00D3
     f6c:	30 91 d4 00 	lds	r19, 0x00D4
     f70:	40 91 d5 00 	lds	r20, 0x00D5
     f74:	50 91 d6 00 	lds	r21, 0x00D6
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	9b 81       	ldd	r25, Y+3	; 0x03
     f7c:	ac 81       	ldd	r26, Y+4	; 0x04
     f7e:	bd 81       	ldd	r27, Y+5	; 0x05
     f80:	82 17       	cp	r24, r18
     f82:	93 07       	cpc	r25, r19
     f84:	a4 07       	cpc	r26, r20
     f86:	b5 07       	cpc	r27, r21
     f88:	78 f7       	brcc	.-34     	; 0xf68 <TMU_vidStartScheduler+0x20>
		{
			Temp = TMU_u32OsTicks;
     f8a:	80 91 d3 00 	lds	r24, 0x00D3
     f8e:	90 91 d4 00 	lds	r25, 0x00D4
     f92:	a0 91 d5 00 	lds	r26, 0x00D5
     f96:	b0 91 d6 00 	lds	r27, 0x00D6
     f9a:	8a 83       	std	Y+2, r24	; 0x02
     f9c:	9b 83       	std	Y+3, r25	; 0x03
     f9e:	ac 83       	std	Y+4, r26	; 0x04
     fa0:	bd 83       	std	Y+5, r27	; 0x05
			//for (u8 i= 0 ; i<MAX_TASKS ; i++)
			for(s8 i = MAX_TASKS-1 ; i>=0 ; i--)
     fa2:	86 e0       	ldi	r24, 0x06	; 6
     fa4:	89 83       	std	Y+1, r24	; 0x01
     fa6:	81 c0       	rjmp	.+258    	; 0x10aa <TMU_vidStartScheduler+0x162>
			{
				if (All_Tasks[i] . pFun != NULL &&
     fa8:	89 81       	ldd	r24, Y+1	; 0x01
     faa:	99 27       	eor	r25, r25
     fac:	87 fd       	sbrc	r24, 7
     fae:	90 95       	com	r25
     fb0:	88 0f       	add	r24, r24
     fb2:	99 1f       	adc	r25, r25
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	88 0f       	add	r24, r24
     fba:	99 1f       	adc	r25, r25
     fbc:	fc 01       	movw	r30, r24
     fbe:	e5 56       	subi	r30, 0x65	; 101
     fc0:	ff 4f       	sbci	r31, 0xFF	; 255
     fc2:	80 81       	ld	r24, Z
     fc4:	91 81       	ldd	r25, Z+1	; 0x01
     fc6:	00 97       	sbiw	r24, 0x00	; 0
     fc8:	09 f4       	brne	.+2      	; 0xfcc <TMU_vidStartScheduler+0x84>
     fca:	6c c0       	rjmp	.+216    	; 0x10a4 <TMU_vidStartScheduler+0x15c>
     fcc:	89 81       	ldd	r24, Y+1	; 0x01
     fce:	99 27       	eor	r25, r25
     fd0:	87 fd       	sbrc	r24, 7
     fd2:	90 95       	com	r25
     fd4:	88 0f       	add	r24, r24
     fd6:	99 1f       	adc	r25, r25
     fd8:	88 0f       	add	r24, r24
     fda:	99 1f       	adc	r25, r25
     fdc:	88 0f       	add	r24, r24
     fde:	99 1f       	adc	r25, r25
     fe0:	fc 01       	movw	r30, r24
     fe2:	ef 55       	subi	r30, 0x5F	; 95
     fe4:	ff 4f       	sbci	r31, 0xFF	; 255
     fe6:	80 81       	ld	r24, Z
     fe8:	87 31       	cpi	r24, 0x17	; 23
     fea:	09 f0       	breq	.+2      	; 0xfee <TMU_vidStartScheduler+0xa6>
     fec:	5b c0       	rjmp	.+182    	; 0x10a4 <TMU_vidStartScheduler+0x15c>
     fee:	e0 90 d3 00 	lds	r14, 0x00D3
     ff2:	f0 90 d4 00 	lds	r15, 0x00D4
     ff6:	00 91 d5 00 	lds	r16, 0x00D5
     ffa:	10 91 d6 00 	lds	r17, 0x00D6
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	99 27       	eor	r25, r25
    1002:	87 fd       	sbrc	r24, 7
    1004:	90 95       	com	r25
    1006:	88 0f       	add	r24, r24
    1008:	99 1f       	adc	r25, r25
    100a:	01 96       	adiw	r24, 0x01	; 1
    100c:	88 0f       	add	r24, r24
    100e:	99 1f       	adc	r25, r25
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	fc 01       	movw	r30, r24
    1016:	e5 56       	subi	r30, 0x65	; 101
    1018:	ff 4f       	sbci	r31, 0xFF	; 255
    101a:	80 81       	ld	r24, Z
    101c:	91 81       	ldd	r25, Z+1	; 0x01
    101e:	9c 01       	movw	r18, r24
    1020:	40 e0       	ldi	r20, 0x00	; 0
    1022:	50 e0       	ldi	r21, 0x00	; 0
    1024:	c8 01       	movw	r24, r16
    1026:	b7 01       	movw	r22, r14
    1028:	0e 94 70 0c 	call	0x18e0	; 0x18e0 <__udivmodsi4>
    102c:	dc 01       	movw	r26, r24
    102e:	cb 01       	movw	r24, r22
    1030:	9c 01       	movw	r18, r24
    1032:	ad 01       	movw	r20, r26
    1034:	89 81       	ldd	r24, Y+1	; 0x01
    1036:	99 27       	eor	r25, r25
    1038:	87 fd       	sbrc	r24, 7
    103a:	90 95       	com	r25
    103c:	88 0f       	add	r24, r24
    103e:	99 1f       	adc	r25, r25
    1040:	88 0f       	add	r24, r24
    1042:	99 1f       	adc	r25, r25
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	fc 01       	movw	r30, r24
    104a:	ee 55       	subi	r30, 0x5E	; 94
    104c:	ff 4f       	sbci	r31, 0xFF	; 255
    104e:	80 81       	ld	r24, Z
    1050:	88 2f       	mov	r24, r24
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	a0 e0       	ldi	r26, 0x00	; 0
    1056:	b0 e0       	ldi	r27, 0x00	; 0
    1058:	28 17       	cp	r18, r24
    105a:	39 07       	cpc	r19, r25
    105c:	4a 07       	cpc	r20, r26
    105e:	5b 07       	cpc	r21, r27
    1060:	09 f5       	brne	.+66     	; 0x10a4 <TMU_vidStartScheduler+0x15c>
					All_Tasks[i].state == READY &&
					TMU_u32OsTicks % All_Tasks[i].Periodicity == All_Tasks[i].offset )
				{
					All_Tasks[i].pFun (All_Tasks[i].parameter);
    1062:	89 81       	ldd	r24, Y+1	; 0x01
    1064:	99 27       	eor	r25, r25
    1066:	87 fd       	sbrc	r24, 7
    1068:	90 95       	com	r25
    106a:	88 0f       	add	r24, r24
    106c:	99 1f       	adc	r25, r25
    106e:	88 0f       	add	r24, r24
    1070:	99 1f       	adc	r25, r25
    1072:	88 0f       	add	r24, r24
    1074:	99 1f       	adc	r25, r25
    1076:	fc 01       	movw	r30, r24
    1078:	e5 56       	subi	r30, 0x65	; 101
    107a:	ff 4f       	sbci	r31, 0xFF	; 255
    107c:	20 81       	ld	r18, Z
    107e:	31 81       	ldd	r19, Z+1	; 0x01
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	99 27       	eor	r25, r25
    1084:	87 fd       	sbrc	r24, 7
    1086:	90 95       	com	r25
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	88 0f       	add	r24, r24
    108e:	99 1f       	adc	r25, r25
    1090:	01 96       	adiw	r24, 0x01	; 1
    1092:	88 0f       	add	r24, r24
    1094:	99 1f       	adc	r25, r25
    1096:	fc 01       	movw	r30, r24
    1098:	e5 56       	subi	r30, 0x65	; 101
    109a:	ff 4f       	sbci	r31, 0xFF	; 255
    109c:	80 81       	ld	r24, Z
    109e:	91 81       	ldd	r25, Z+1	; 0x01
    10a0:	f9 01       	movw	r30, r18
    10a2:	09 95       	icall
	{
		if (TMU_u32OsTicks > Temp)
		{
			Temp = TMU_u32OsTicks;
			//for (u8 i= 0 ; i<MAX_TASKS ; i++)
			for(s8 i = MAX_TASKS-1 ; i>=0 ; i--)
    10a4:	89 81       	ldd	r24, Y+1	; 0x01
    10a6:	81 50       	subi	r24, 0x01	; 1
    10a8:	89 83       	std	Y+1, r24	; 0x01
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	88 23       	and	r24, r24
    10ae:	0c f0       	brlt	.+2      	; 0x10b2 <TMU_vidStartScheduler+0x16a>
    10b0:	7b cf       	rjmp	.-266    	; 0xfa8 <TMU_vidStartScheduler+0x60>
    10b2:	5a cf       	rjmp	.-332    	; 0xf68 <TMU_vidStartScheduler+0x20>

000010b4 <TMU_vidDeleteTask>:
	}
}


void TMU_vidDeleteTask(u8 Copy_u8Priority)
{
    10b4:	df 93       	push	r29
    10b6:	cf 93       	push	r28
    10b8:	0f 92       	push	r0
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
    10be:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Priority <MAX_TASKS)
    10c0:	89 81       	ldd	r24, Y+1	; 0x01
    10c2:	87 30       	cpi	r24, 0x07	; 7
    10c4:	e0 f4       	brcc	.+56     	; 0x10fe <TMU_vidDeleteTask+0x4a>
	{
		All_Tasks[Copy_u8Priority].pFun = NULL;
    10c6:	89 81       	ldd	r24, Y+1	; 0x01
    10c8:	88 2f       	mov	r24, r24
    10ca:	90 e0       	ldi	r25, 0x00	; 0
    10cc:	88 0f       	add	r24, r24
    10ce:	99 1f       	adc	r25, r25
    10d0:	88 0f       	add	r24, r24
    10d2:	99 1f       	adc	r25, r25
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	fc 01       	movw	r30, r24
    10da:	e5 56       	subi	r30, 0x65	; 101
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	11 82       	std	Z+1, r1	; 0x01
    10e0:	10 82       	st	Z, r1
		All_Tasks[ Copy_u8Priority].state = KILLED;
    10e2:	89 81       	ldd	r24, Y+1	; 0x01
    10e4:	88 2f       	mov	r24, r24
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	88 0f       	add	r24, r24
    10ea:	99 1f       	adc	r25, r25
    10ec:	88 0f       	add	r24, r24
    10ee:	99 1f       	adc	r25, r25
    10f0:	88 0f       	add	r24, r24
    10f2:	99 1f       	adc	r25, r25
    10f4:	fc 01       	movw	r30, r24
    10f6:	ef 55       	subi	r30, 0x5F	; 95
    10f8:	ff 4f       	sbci	r31, 0xFF	; 255
    10fa:	81 e1       	ldi	r24, 0x11	; 17
    10fc:	80 83       	st	Z, r24
	}
}
    10fe:	0f 90       	pop	r0
    1100:	cf 91       	pop	r28
    1102:	df 91       	pop	r29
    1104:	08 95       	ret

00001106 <TMU_vidPauseTask>:

void TMU_vidPauseTask(u8 Copy_u8Priority)
{
    1106:	df 93       	push	r29
    1108:	cf 93       	push	r28
    110a:	0f 92       	push	r0
    110c:	cd b7       	in	r28, 0x3d	; 61
    110e:	de b7       	in	r29, 0x3e	; 62
    1110:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Priority <MAX_TASKS)
    1112:	89 81       	ldd	r24, Y+1	; 0x01
    1114:	87 30       	cpi	r24, 0x07	; 7
    1116:	70 f4       	brcc	.+28     	; 0x1134 <TMU_vidPauseTask+0x2e>
	{
		All_Tasks[Copy_u8Priority].state = PAUSED;
    1118:	89 81       	ldd	r24, Y+1	; 0x01
    111a:	88 2f       	mov	r24, r24
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	88 0f       	add	r24, r24
    1120:	99 1f       	adc	r25, r25
    1122:	88 0f       	add	r24, r24
    1124:	99 1f       	adc	r25, r25
    1126:	88 0f       	add	r24, r24
    1128:	99 1f       	adc	r25, r25
    112a:	fc 01       	movw	r30, r24
    112c:	ef 55       	subi	r30, 0x5F	; 95
    112e:	ff 4f       	sbci	r31, 0xFF	; 255
    1130:	88 e3       	ldi	r24, 0x38	; 56
    1132:	80 83       	st	Z, r24
	}
}
    1134:	0f 90       	pop	r0
    1136:	cf 91       	pop	r28
    1138:	df 91       	pop	r29
    113a:	08 95       	ret

0000113c <TMU_vidResumeTask>:

void TMU_vidResumeTask(u8 Copy_u8Priority)
{
    113c:	df 93       	push	r29
    113e:	cf 93       	push	r28
    1140:	0f 92       	push	r0
    1142:	cd b7       	in	r28, 0x3d	; 61
    1144:	de b7       	in	r29, 0x3e	; 62
    1146:	89 83       	std	Y+1, r24	; 0x01
	if (Copy_u8Priority <MAX_TASKS)
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	87 30       	cpi	r24, 0x07	; 7
    114c:	70 f4       	brcc	.+28     	; 0x116a <TMU_vidResumeTask+0x2e>
	{
		All_Tasks[Copy_u8Priority].state = READY;
    114e:	89 81       	ldd	r24, Y+1	; 0x01
    1150:	88 2f       	mov	r24, r24
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	88 0f       	add	r24, r24
    1156:	99 1f       	adc	r25, r25
    1158:	88 0f       	add	r24, r24
    115a:	99 1f       	adc	r25, r25
    115c:	88 0f       	add	r24, r24
    115e:	99 1f       	adc	r25, r25
    1160:	fc 01       	movw	r30, r24
    1162:	ef 55       	subi	r30, 0x5F	; 95
    1164:	ff 4f       	sbci	r31, 0xFF	; 255
    1166:	87 e1       	ldi	r24, 0x17	; 23
    1168:	80 83       	st	Z, r24
	}
}
    116a:	0f 90       	pop	r0
    116c:	cf 91       	pop	r28
    116e:	df 91       	pop	r29
    1170:	08 95       	ret

00001172 <__vector_10>:

#if TIMER_CHANNEL == TIMER0

void __vector_10 (void)__attribute__((signal));
void __vector_10 (void)
{
    1172:	1f 92       	push	r1
    1174:	0f 92       	push	r0
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	0f 92       	push	r0
    117a:	11 24       	eor	r1, r1
    117c:	8f 93       	push	r24
    117e:	9f 93       	push	r25
    1180:	af 93       	push	r26
    1182:	bf 93       	push	r27
    1184:	df 93       	push	r29
    1186:	cf 93       	push	r28
    1188:	cd b7       	in	r28, 0x3d	; 61
    118a:	de b7       	in	r29, 0x3e	; 62
	TMU_u8ISRCount--;
    118c:	80 91 99 00 	lds	r24, 0x0099
    1190:	81 50       	subi	r24, 0x01	; 1
    1192:	80 93 99 00 	sts	0x0099, r24
	if ( ! TMU_u8ISRCount)
    1196:	80 91 99 00 	lds	r24, 0x0099
    119a:	88 23       	and	r24, r24
    119c:	b9 f4       	brne	.+46     	; 0x11cc <__vector_10+0x5a>
	{
		TMU_u32OsTicks++;
    119e:	80 91 d3 00 	lds	r24, 0x00D3
    11a2:	90 91 d4 00 	lds	r25, 0x00D4
    11a6:	a0 91 d5 00 	lds	r26, 0x00D5
    11aa:	b0 91 d6 00 	lds	r27, 0x00D6
    11ae:	01 96       	adiw	r24, 0x01	; 1
    11b0:	a1 1d       	adc	r26, r1
    11b2:	b1 1d       	adc	r27, r1
    11b4:	80 93 d3 00 	sts	0x00D3, r24
    11b8:	90 93 d4 00 	sts	0x00D4, r25
    11bc:	a0 93 d5 00 	sts	0x00D5, r26
    11c0:	b0 93 d6 00 	sts	0x00D6, r27

		TMU_u8ISRCount = TMU_u8ISRNum;
    11c4:	80 91 98 00 	lds	r24, 0x0098
    11c8:	80 93 99 00 	sts	0x0099, r24
	}
}
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	bf 91       	pop	r27
    11d2:	af 91       	pop	r26
    11d4:	9f 91       	pop	r25
    11d6:	8f 91       	pop	r24
    11d8:	0f 90       	pop	r0
    11da:	0f be       	out	0x3f, r0	; 63
    11dc:	0f 90       	pop	r0
    11de:	1f 90       	pop	r1
    11e0:	18 95       	reti

000011e2 <__vector_11>:

void __vector_11 (void)__attribute__((signal));
void __vector_11 (void)
{
    11e2:	1f 92       	push	r1
    11e4:	0f 92       	push	r0
    11e6:	0f b6       	in	r0, 0x3f	; 63
    11e8:	0f 92       	push	r0
    11ea:	11 24       	eor	r1, r1
    11ec:	8f 93       	push	r24
    11ee:	9f 93       	push	r25
    11f0:	af 93       	push	r26
    11f2:	bf 93       	push	r27
    11f4:	ef 93       	push	r30
    11f6:	ff 93       	push	r31
    11f8:	df 93       	push	r29
    11fa:	cf 93       	push	r28
    11fc:	cd b7       	in	r28, 0x3d	; 61
    11fe:	de b7       	in	r29, 0x3e	; 62
	TMU_u8ISRCount--;
    1200:	80 91 99 00 	lds	r24, 0x0099
    1204:	81 50       	subi	r24, 0x01	; 1
    1206:	80 93 99 00 	sts	0x0099, r24
	if ( ! TMU_u8ISRCount)
    120a:	80 91 99 00 	lds	r24, 0x0099
    120e:	88 23       	and	r24, r24
    1210:	e1 f4       	brne	.+56     	; 0x124a <__vector_11+0x68>
	{
		TCNT0 = TMU_u8Preload;
    1212:	e2 e5       	ldi	r30, 0x52	; 82
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	80 91 9a 00 	lds	r24, 0x009A
    121a:	80 83       	st	Z, r24

		TMU_u32OsTicks++;
    121c:	80 91 d3 00 	lds	r24, 0x00D3
    1220:	90 91 d4 00 	lds	r25, 0x00D4
    1224:	a0 91 d5 00 	lds	r26, 0x00D5
    1228:	b0 91 d6 00 	lds	r27, 0x00D6
    122c:	01 96       	adiw	r24, 0x01	; 1
    122e:	a1 1d       	adc	r26, r1
    1230:	b1 1d       	adc	r27, r1
    1232:	80 93 d3 00 	sts	0x00D3, r24
    1236:	90 93 d4 00 	sts	0x00D4, r25
    123a:	a0 93 d5 00 	sts	0x00D5, r26
    123e:	b0 93 d6 00 	sts	0x00D6, r27

		TMU_u8ISRCount = TMU_u8ISRNum;
    1242:	80 91 98 00 	lds	r24, 0x0098
    1246:	80 93 99 00 	sts	0x0099, r24
	}
}
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	ff 91       	pop	r31
    1250:	ef 91       	pop	r30
    1252:	bf 91       	pop	r27
    1254:	af 91       	pop	r26
    1256:	9f 91       	pop	r25
    1258:	8f 91       	pop	r24
    125a:	0f 90       	pop	r0
    125c:	0f be       	out	0x3f, r0	; 63
    125e:	0f 90       	pop	r0
    1260:	1f 90       	pop	r1
    1262:	18 95       	reti

00001264 <main>:
u8 Global_u8CounterMaxValue = 30 ;
u8 Global_u8CounterValue = 30 ;

int
main(void)
{
    1264:	0f 93       	push	r16
    1266:	df 93       	push	r29
    1268:	cf 93       	push	r28
    126a:	cd b7       	in	r28, 0x3d	; 61
    126c:	de b7       	in	r29, 0x3e	; 62
    126e:	29 97       	sbiw	r28, 0x09	; 9
    1270:	0f b6       	in	r0, 0x3f	; 63
    1272:	f8 94       	cli
    1274:	de bf       	out	0x3e, r29	; 62
    1276:	0f be       	out	0x3f, r0	; 63
    1278:	cd bf       	out	0x3d, r28	; 61

	u8 SSeg_u8ActiveModule = COUNTER_UNITS ;
    127a:	8c e0       	ldi	r24, 0x0C	; 12
    127c:	89 83       	std	Y+1, r24	; 0x01
	u8 LampStatus[3]={ LD_u8OFF , LD_u8OFF , LD_u8OFF };
    127e:	ce 01       	movw	r24, r28
    1280:	02 96       	adiw	r24, 0x02	; 2
    1282:	9e 83       	std	Y+6, r25	; 0x06
    1284:	8d 83       	std	Y+5, r24	; 0x05
    1286:	e5 e9       	ldi	r30, 0x95	; 149
    1288:	f0 e0       	ldi	r31, 0x00	; 0
    128a:	f8 87       	std	Y+8, r31	; 0x08
    128c:	ef 83       	std	Y+7, r30	; 0x07
    128e:	f3 e0       	ldi	r31, 0x03	; 3
    1290:	f9 87       	std	Y+9, r31	; 0x09
    1292:	ef 81       	ldd	r30, Y+7	; 0x07
    1294:	f8 85       	ldd	r31, Y+8	; 0x08
    1296:	00 80       	ld	r0, Z
    1298:	8f 81       	ldd	r24, Y+7	; 0x07
    129a:	98 85       	ldd	r25, Y+8	; 0x08
    129c:	01 96       	adiw	r24, 0x01	; 1
    129e:	98 87       	std	Y+8, r25	; 0x08
    12a0:	8f 83       	std	Y+7, r24	; 0x07
    12a2:	ed 81       	ldd	r30, Y+5	; 0x05
    12a4:	fe 81       	ldd	r31, Y+6	; 0x06
    12a6:	00 82       	st	Z, r0
    12a8:	8d 81       	ldd	r24, Y+5	; 0x05
    12aa:	9e 81       	ldd	r25, Y+6	; 0x06
    12ac:	01 96       	adiw	r24, 0x01	; 1
    12ae:	9e 83       	std	Y+6, r25	; 0x06
    12b0:	8d 83       	std	Y+5, r24	; 0x05
    12b2:	99 85       	ldd	r25, Y+9	; 0x09
    12b4:	91 50       	subi	r25, 0x01	; 1
    12b6:	99 87       	std	Y+9, r25	; 0x09
    12b8:	e9 85       	ldd	r30, Y+9	; 0x09
    12ba:	ee 23       	and	r30, r30
    12bc:	51 f7       	brne	.-44     	; 0x1292 <main+0x2e>

	LD_enuInit();
    12be:	0e 94 71 03 	call	0x6e2	; 0x6e2 <LD_enuInit>
	Switch_enuInit();
    12c2:	0e 94 49 00 	call	0x92	; 0x92 <Switch_enuInit>
	SevSeg_enuInit();
    12c6:	0e 94 f6 00 	call	0x1ec	; 0x1ec <SevSeg_enuInit>
	TMU_vidInit();
    12ca:	0e 94 14 07 	call	0xe28	; 0xe28 <TMU_vidInit>

	TMU_vidCreateTask(DisplayCounter		, &SSeg_u8ActiveModule	, 4   , 6 , 0 );
    12ce:	8c e8       	ldi	r24, 0x8C	; 140
    12d0:	9b e0       	ldi	r25, 0x0B	; 11
    12d2:	9e 01       	movw	r18, r28
    12d4:	2f 5f       	subi	r18, 0xFF	; 255
    12d6:	3f 4f       	sbci	r19, 0xFF	; 255
    12d8:	b9 01       	movw	r22, r18
    12da:	44 e0       	ldi	r20, 0x04	; 4
    12dc:	50 e0       	ldi	r21, 0x00	; 0
    12de:	26 e0       	ldi	r18, 0x06	; 6
    12e0:	00 e0       	ldi	r16, 0x00	; 0
    12e2:	0e 94 30 07 	call	0xe60	; 0xe60 <TMU_vidCreateTask>
	TMU_vidCreateTask(CheckTrafficStatus 	, LampStatus			, 100 , 5 , 0 );
    12e6:	8b ec       	ldi	r24, 0xCB	; 203
    12e8:	99 e0       	ldi	r25, 0x09	; 9
    12ea:	9e 01       	movw	r18, r28
    12ec:	2e 5f       	subi	r18, 0xFE	; 254
    12ee:	3f 4f       	sbci	r19, 0xFF	; 255
    12f0:	b9 01       	movw	r22, r18
    12f2:	44 e6       	ldi	r20, 0x64	; 100
    12f4:	50 e0       	ldi	r21, 0x00	; 0
    12f6:	25 e0       	ldi	r18, 0x05	; 5
    12f8:	00 e0       	ldi	r16, 0x00	; 0
    12fa:	0e 94 30 07 	call	0xe60	; 0xe60 <TMU_vidCreateTask>
	TMU_vidCreateTask(RedLampStatus			, LampStatus+RED_LAMP	, 100 , 4 , 1 );
    12fe:	8f ed       	ldi	r24, 0xDF	; 223
    1300:	9b e0       	ldi	r25, 0x0B	; 11
    1302:	9e 01       	movw	r18, r28
    1304:	2e 5f       	subi	r18, 0xFE	; 254
    1306:	3f 4f       	sbci	r19, 0xFF	; 255
    1308:	b9 01       	movw	r22, r18
    130a:	44 e6       	ldi	r20, 0x64	; 100
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	24 e0       	ldi	r18, 0x04	; 4
    1310:	01 e0       	ldi	r16, 0x01	; 1
    1312:	0e 94 30 07 	call	0xe60	; 0xe60 <TMU_vidCreateTask>
	TMU_vidCreateTask(YellowLampStatus		, LampStatus+YLW_LAMP	, 100 , 3 , 2 );
    1316:	45 e0       	ldi	r20, 0x05	; 5
    1318:	5c e0       	ldi	r21, 0x0C	; 12
    131a:	ce 01       	movw	r24, r28
    131c:	02 96       	adiw	r24, 0x02	; 2
    131e:	9c 01       	movw	r18, r24
    1320:	2f 5f       	subi	r18, 0xFF	; 255
    1322:	3f 4f       	sbci	r19, 0xFF	; 255
    1324:	ca 01       	movw	r24, r20
    1326:	b9 01       	movw	r22, r18
    1328:	44 e6       	ldi	r20, 0x64	; 100
    132a:	50 e0       	ldi	r21, 0x00	; 0
    132c:	23 e0       	ldi	r18, 0x03	; 3
    132e:	02 e0       	ldi	r16, 0x02	; 2
    1330:	0e 94 30 07 	call	0xe60	; 0xe60 <TMU_vidCreateTask>
	TMU_vidCreateTask(GreenLampStatus		, LampStatus+GRN_LAMP	, 100 , 2 , 3 );
    1334:	4b e2       	ldi	r20, 0x2B	; 43
    1336:	5c e0       	ldi	r21, 0x0C	; 12
    1338:	ce 01       	movw	r24, r28
    133a:	02 96       	adiw	r24, 0x02	; 2
    133c:	9c 01       	movw	r18, r24
    133e:	2e 5f       	subi	r18, 0xFE	; 254
    1340:	3f 4f       	sbci	r19, 0xFF	; 255
    1342:	ca 01       	movw	r24, r20
    1344:	b9 01       	movw	r22, r18
    1346:	44 e6       	ldi	r20, 0x64	; 100
    1348:	50 e0       	ldi	r21, 0x00	; 0
    134a:	22 e0       	ldi	r18, 0x02	; 2
    134c:	03 e0       	ldi	r16, 0x03	; 3
    134e:	0e 94 30 07 	call	0xe60	; 0xe60 <TMU_vidCreateTask>
	TMU_vidCreateTask(CheckIncrementSwitch	, NULL					, 13  , 1 , 0 );
    1352:	88 e6       	ldi	r24, 0x68	; 104
    1354:	9a e0       	ldi	r25, 0x0A	; 10
    1356:	60 e0       	ldi	r22, 0x00	; 0
    1358:	70 e0       	ldi	r23, 0x00	; 0
    135a:	4d e0       	ldi	r20, 0x0D	; 13
    135c:	50 e0       	ldi	r21, 0x00	; 0
    135e:	21 e0       	ldi	r18, 0x01	; 1
    1360:	00 e0       	ldi	r16, 0x00	; 0
    1362:	0e 94 30 07 	call	0xe60	; 0xe60 <TMU_vidCreateTask>
	TMU_vidCreateTask(CheckDecrementSwitch	, NULL					, 13  , 0 , 6 );
    1366:	8a ef       	ldi	r24, 0xFA	; 250
    1368:	9a e0       	ldi	r25, 0x0A	; 10
    136a:	60 e0       	ldi	r22, 0x00	; 0
    136c:	70 e0       	ldi	r23, 0x00	; 0
    136e:	4d e0       	ldi	r20, 0x0D	; 13
    1370:	50 e0       	ldi	r21, 0x00	; 0
    1372:	20 e0       	ldi	r18, 0x00	; 0
    1374:	06 e0       	ldi	r16, 0x06	; 6
    1376:	0e 94 30 07 	call	0xe60	; 0xe60 <TMU_vidCreateTask>

	TMU_vidStartScheduler();
    137a:	0e 94 a4 07 	call	0xf48	; 0xf48 <TMU_vidStartScheduler>
    137e:	80 e0       	ldi	r24, 0x00	; 0
    1380:	90 e0       	ldi	r25, 0x00	; 0
}
    1382:	29 96       	adiw	r28, 0x09	; 9
    1384:	0f b6       	in	r0, 0x3f	; 63
    1386:	f8 94       	cli
    1388:	de bf       	out	0x3e, r29	; 62
    138a:	0f be       	out	0x3f, r0	; 63
    138c:	cd bf       	out	0x3d, r28	; 61
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	0f 91       	pop	r16
    1394:	08 95       	ret

00001396 <CheckTrafficStatus>:

void CheckTrafficStatus(void*p)
{
    1396:	df 93       	push	r29
    1398:	cf 93       	push	r28
    139a:	00 d0       	rcall	.+0      	; 0x139c <CheckTrafficStatus+0x6>
    139c:	00 d0       	rcall	.+0      	; 0x139e <CheckTrafficStatus+0x8>
    139e:	0f 92       	push	r0
    13a0:	cd b7       	in	r28, 0x3d	; 61
    13a2:	de b7       	in	r29, 0x3e	; 62
    13a4:	9c 83       	std	Y+4, r25	; 0x04
    13a6:	8b 83       	std	Y+3, r24	; 0x03
	u8 *ptr = (u8*)p;
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	9c 81       	ldd	r25, Y+4	; 0x04
    13ac:	9a 83       	std	Y+2, r25	; 0x02
    13ae:	89 83       	std	Y+1, r24	; 0x01

	if( Global_u8OperationMode == NORMAL )
    13b0:	80 91 8b 00 	lds	r24, 0x008B
    13b4:	85 30       	cpi	r24, 0x05	; 5
    13b6:	09 f0       	breq	.+2      	; 0x13ba <CheckTrafficStatus+0x24>
    13b8:	76 c0       	rjmp	.+236    	; 0x14a6 <CheckTrafficStatus+0x110>
	{
		Global_u8CounterValue--;
    13ba:	80 91 8e 00 	lds	r24, 0x008E
    13be:	81 50       	subi	r24, 0x01	; 1
    13c0:	80 93 8e 00 	sts	0x008E, r24

		if( !Global_u8CounterValue )
    13c4:	80 91 8e 00 	lds	r24, 0x008E
    13c8:	88 23       	and	r24, r24
    13ca:	81 f4       	brne	.+32     	; 0x13ec <CheckTrafficStatus+0x56>
		{
			Global_u8TrafficStatus = ( (Global_u8TrafficStatus == TRAFFIC_STOP)? TRAFFIC_GO : TRAFFIC_STOP ) ;
    13cc:	80 91 8c 00 	lds	r24, 0x008C
    13d0:	8c 30       	cpi	r24, 0x0C	; 12
    13d2:	19 f4       	brne	.+6      	; 0x13da <CheckTrafficStatus+0x44>
    13d4:	80 e1       	ldi	r24, 0x10	; 16
    13d6:	8d 83       	std	Y+5, r24	; 0x05
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <CheckTrafficStatus+0x48>
    13da:	8c e0       	ldi	r24, 0x0C	; 12
    13dc:	8d 83       	std	Y+5, r24	; 0x05
    13de:	8d 81       	ldd	r24, Y+5	; 0x05
    13e0:	80 93 8c 00 	sts	0x008C, r24
			Global_u8CounterValue = Global_u8CounterMaxValue;
    13e4:	80 91 8d 00 	lds	r24, 0x008D
    13e8:	80 93 8e 00 	sts	0x008E, r24
		}


		if( Global_u8TrafficStatus == TRAFFIC_STOP && COUNTER_STATUS == COUNTER_HOLD )
    13ec:	80 91 8c 00 	lds	r24, 0x008C
    13f0:	8c 30       	cpi	r24, 0x0C	; 12
    13f2:	99 f4       	brne	.+38     	; 0x141a <CheckTrafficStatus+0x84>
    13f4:	80 91 8e 00 	lds	r24, 0x008E
    13f8:	84 30       	cpi	r24, 0x04	; 4
    13fa:	78 f0       	brcs	.+30     	; 0x141a <CheckTrafficStatus+0x84>
		{
			*(ptr+RED_LAMP) = LD_u8ON ;
    13fc:	e9 81       	ldd	r30, Y+1	; 0x01
    13fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	80 83       	st	Z, r24
			*(ptr+YLW_LAMP) = LD_u8OFF ;
    1404:	89 81       	ldd	r24, Y+1	; 0x01
    1406:	9a 81       	ldd	r25, Y+2	; 0x02
    1408:	fc 01       	movw	r30, r24
    140a:	31 96       	adiw	r30, 0x01	; 1
    140c:	10 82       	st	Z, r1
			*(ptr+GRN_LAMP) = LD_u8OFF ;
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	9a 81       	ldd	r25, Y+2	; 0x02
    1412:	fc 01       	movw	r30, r24
    1414:	32 96       	adiw	r30, 0x02	; 2
    1416:	10 82       	st	Z, r1
    1418:	53 c0       	rjmp	.+166    	; 0x14c0 <CheckTrafficStatus+0x12a>
		}
		else if( Global_u8TrafficStatus == TRAFFIC_STOP && COUNTER_STATUS == COUNTER_STANDBY )
    141a:	80 91 8c 00 	lds	r24, 0x008C
    141e:	8c 30       	cpi	r24, 0x0C	; 12
    1420:	a1 f4       	brne	.+40     	; 0x144a <CheckTrafficStatus+0xb4>
    1422:	80 91 8e 00 	lds	r24, 0x008E
    1426:	84 30       	cpi	r24, 0x04	; 4
    1428:	80 f4       	brcc	.+32     	; 0x144a <CheckTrafficStatus+0xb4>
		{
			*(ptr+RED_LAMP) = LD_u8ON ;
    142a:	e9 81       	ldd	r30, Y+1	; 0x01
    142c:	fa 81       	ldd	r31, Y+2	; 0x02
    142e:	81 e0       	ldi	r24, 0x01	; 1
    1430:	80 83       	st	Z, r24
			*(ptr+YLW_LAMP) = LD_u8ON ;
    1432:	89 81       	ldd	r24, Y+1	; 0x01
    1434:	9a 81       	ldd	r25, Y+2	; 0x02
    1436:	fc 01       	movw	r30, r24
    1438:	31 96       	adiw	r30, 0x01	; 1
    143a:	81 e0       	ldi	r24, 0x01	; 1
    143c:	80 83       	st	Z, r24
			*(ptr+GRN_LAMP) = LD_u8OFF ;
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	9a 81       	ldd	r25, Y+2	; 0x02
    1442:	fc 01       	movw	r30, r24
    1444:	32 96       	adiw	r30, 0x02	; 2
    1446:	10 82       	st	Z, r1
    1448:	3b c0       	rjmp	.+118    	; 0x14c0 <CheckTrafficStatus+0x12a>
		}
		else if( Global_u8TrafficStatus == TRAFFIC_GO && COUNTER_STATUS == COUNTER_HOLD )
    144a:	80 91 8c 00 	lds	r24, 0x008C
    144e:	80 31       	cpi	r24, 0x10	; 16
    1450:	99 f4       	brne	.+38     	; 0x1478 <CheckTrafficStatus+0xe2>
    1452:	80 91 8e 00 	lds	r24, 0x008E
    1456:	84 30       	cpi	r24, 0x04	; 4
    1458:	78 f0       	brcs	.+30     	; 0x1478 <CheckTrafficStatus+0xe2>
		{
			*(ptr+RED_LAMP) = LD_u8OFF ;
    145a:	e9 81       	ldd	r30, Y+1	; 0x01
    145c:	fa 81       	ldd	r31, Y+2	; 0x02
    145e:	10 82       	st	Z, r1
			*(ptr+YLW_LAMP) = LD_u8OFF ;
    1460:	89 81       	ldd	r24, Y+1	; 0x01
    1462:	9a 81       	ldd	r25, Y+2	; 0x02
    1464:	fc 01       	movw	r30, r24
    1466:	31 96       	adiw	r30, 0x01	; 1
    1468:	10 82       	st	Z, r1
			*(ptr+GRN_LAMP) = LD_u8ON ;
    146a:	89 81       	ldd	r24, Y+1	; 0x01
    146c:	9a 81       	ldd	r25, Y+2	; 0x02
    146e:	fc 01       	movw	r30, r24
    1470:	32 96       	adiw	r30, 0x02	; 2
    1472:	81 e0       	ldi	r24, 0x01	; 1
    1474:	80 83       	st	Z, r24
    1476:	24 c0       	rjmp	.+72     	; 0x14c0 <CheckTrafficStatus+0x12a>
		}
		else if( Global_u8TrafficStatus == TRAFFIC_GO && COUNTER_STATUS == COUNTER_STANDBY )
    1478:	80 91 8c 00 	lds	r24, 0x008C
    147c:	80 31       	cpi	r24, 0x10	; 16
    147e:	01 f5       	brne	.+64     	; 0x14c0 <CheckTrafficStatus+0x12a>
    1480:	80 91 8e 00 	lds	r24, 0x008E
    1484:	84 30       	cpi	r24, 0x04	; 4
    1486:	e0 f4       	brcc	.+56     	; 0x14c0 <CheckTrafficStatus+0x12a>
		{
			*(ptr+RED_LAMP) = LD_u8OFF ;
    1488:	e9 81       	ldd	r30, Y+1	; 0x01
    148a:	fa 81       	ldd	r31, Y+2	; 0x02
    148c:	10 82       	st	Z, r1
			*(ptr+YLW_LAMP) = LD_u8ON ;
    148e:	89 81       	ldd	r24, Y+1	; 0x01
    1490:	9a 81       	ldd	r25, Y+2	; 0x02
    1492:	fc 01       	movw	r30, r24
    1494:	31 96       	adiw	r30, 0x01	; 1
    1496:	81 e0       	ldi	r24, 0x01	; 1
    1498:	80 83       	st	Z, r24
			*(ptr+GRN_LAMP) = LD_u8OFF ;
    149a:	89 81       	ldd	r24, Y+1	; 0x01
    149c:	9a 81       	ldd	r25, Y+2	; 0x02
    149e:	fc 01       	movw	r30, r24
    14a0:	32 96       	adiw	r30, 0x02	; 2
    14a2:	10 82       	st	Z, r1
    14a4:	0d c0       	rjmp	.+26     	; 0x14c0 <CheckTrafficStatus+0x12a>
		}
	}
	else
	{
		*(ptr+RED_LAMP) = LD_u8OFF;
    14a6:	e9 81       	ldd	r30, Y+1	; 0x01
    14a8:	fa 81       	ldd	r31, Y+2	; 0x02
    14aa:	10 82       	st	Z, r1
		*(ptr+YLW_LAMP) = LD_u8OFF;
    14ac:	89 81       	ldd	r24, Y+1	; 0x01
    14ae:	9a 81       	ldd	r25, Y+2	; 0x02
    14b0:	fc 01       	movw	r30, r24
    14b2:	31 96       	adiw	r30, 0x01	; 1
    14b4:	10 82       	st	Z, r1
		*(ptr+GRN_LAMP) = LD_u8OFF;
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	9a 81       	ldd	r25, Y+2	; 0x02
    14ba:	fc 01       	movw	r30, r24
    14bc:	32 96       	adiw	r30, 0x02	; 2
    14be:	10 82       	st	Z, r1
	}
}
    14c0:	0f 90       	pop	r0
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	0f 90       	pop	r0
    14ca:	cf 91       	pop	r28
    14cc:	df 91       	pop	r29
    14ce:	08 95       	ret

000014d0 <CheckIncrementSwitch>:

void CheckIncrementSwitch(void*p)
{
    14d0:	df 93       	push	r29
    14d2:	cf 93       	push	r28
    14d4:	00 d0       	rcall	.+0      	; 0x14d6 <CheckIncrementSwitch+0x6>
    14d6:	0f 92       	push	r0
    14d8:	cd b7       	in	r28, 0x3d	; 61
    14da:	de b7       	in	r29, 0x3e	; 62
    14dc:	9b 83       	std	Y+3, r25	; 0x03
    14de:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8SwitchValue;


		if( ES_OK == Switch_enuGetPressed( INC_SW , &Local_u8SwitchValue ) )
    14e0:	89 ec       	ldi	r24, 0xC9	; 201
    14e2:	9e 01       	movw	r18, r28
    14e4:	2f 5f       	subi	r18, 0xFF	; 255
    14e6:	3f 4f       	sbci	r19, 0xFF	; 255
    14e8:	b9 01       	movw	r22, r18
    14ea:	0e 94 b8 00 	call	0x170	; 0x170 <Switch_enuGetPressed>
    14ee:	88 23       	and	r24, r24
    14f0:	09 f0       	breq	.+2      	; 0x14f4 <CheckIncrementSwitch+0x24>
    14f2:	7a c0       	rjmp	.+244    	; 0x15e8 <CheckIncrementSwitch+0x118>
		{
			static u8 press = 0, hold = 0 , BounceDelay = BOUNCE_COUNTS ;
			static u16 SetupDelay = SETUP_COUNTS ;
			if ( (Local_u8SwitchValue == DIO_u8HIGH ) && press == 0 && hold == 0 )  //First press
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	81 30       	cpi	r24, 0x01	; 1
    14f8:	f1 f4       	brne	.+60     	; 0x1536 <CheckIncrementSwitch+0x66>
    14fa:	80 91 d8 00 	lds	r24, 0x00D8
    14fe:	88 23       	and	r24, r24
    1500:	d1 f4       	brne	.+52     	; 0x1536 <CheckIncrementSwitch+0x66>
    1502:	80 91 d7 00 	lds	r24, 0x00D7
    1506:	88 23       	and	r24, r24
    1508:	b1 f4       	brne	.+44     	; 0x1536 <CheckIncrementSwitch+0x66>
			{
				if( Global_u8OperationMode == NORMAL )
    150a:	80 91 8b 00 	lds	r24, 0x008B
    150e:	85 30       	cpi	r24, 0x05	; 5
    1510:	21 f4       	brne	.+8      	; 0x151a <CheckIncrementSwitch+0x4a>
				{
					Global_u8OperationMode = SETUP ;
    1512:	89 e0       	ldi	r24, 0x09	; 9
    1514:	80 93 8b 00 	sts	0x008B, r24
    1518:	67 c0       	rjmp	.+206    	; 0x15e8 <CheckIncrementSwitch+0x118>
				}
				else
				{
					if( Global_u8CounterMaxValue < COUNTER_MAX_LIMIT )
    151a:	80 91 8d 00 	lds	r24, 0x008D
    151e:	8a 35       	cpi	r24, 0x5A	; 90
    1520:	08 f0       	brcs	.+2      	; 0x1524 <CheckIncrementSwitch+0x54>
    1522:	62 c0       	rjmp	.+196    	; 0x15e8 <CheckIncrementSwitch+0x118>
					{
						Global_u8CounterMaxValue++;
    1524:	80 91 8d 00 	lds	r24, 0x008D
    1528:	8f 5f       	subi	r24, 0xFF	; 255
    152a:	80 93 8d 00 	sts	0x008D, r24
						press = 1 ;
    152e:	81 e0       	ldi	r24, 0x01	; 1
    1530:	80 93 d8 00 	sts	0x00D8, r24
    1534:	59 c0       	rjmp	.+178    	; 0x15e8 <CheckIncrementSwitch+0x118>
					}
				}
			}
			else if ( (Local_u8SwitchValue == DIO_u8HIGH ) && press == 1 && hold == 0 ) //continued first press
    1536:	89 81       	ldd	r24, Y+1	; 0x01
    1538:	81 30       	cpi	r24, 0x01	; 1
    153a:	61 f4       	brne	.+24     	; 0x1554 <CheckIncrementSwitch+0x84>
    153c:	80 91 d8 00 	lds	r24, 0x00D8
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	41 f4       	brne	.+16     	; 0x1554 <CheckIncrementSwitch+0x84>
    1544:	80 91 d7 00 	lds	r24, 0x00D7
    1548:	88 23       	and	r24, r24
    154a:	21 f4       	brne	.+8      	; 0x1554 <CheckIncrementSwitch+0x84>
			{
				hold = 1;
    154c:	81 e0       	ldi	r24, 0x01	; 1
    154e:	80 93 d7 00 	sts	0x00D7, r24
    1552:	4a c0       	rjmp	.+148    	; 0x15e8 <CheckIncrementSwitch+0x118>
			}
			else if ( (Local_u8SwitchValue == DIO_u8LOW ) && press == 1 && hold == 1 ) // removed first press
    1554:	89 81       	ldd	r24, Y+1	; 0x01
    1556:	88 23       	and	r24, r24
    1558:	c9 f4       	brne	.+50     	; 0x158c <CheckIncrementSwitch+0xbc>
    155a:	80 91 d8 00 	lds	r24, 0x00D8
    155e:	81 30       	cpi	r24, 0x01	; 1
    1560:	a9 f4       	brne	.+42     	; 0x158c <CheckIncrementSwitch+0xbc>
    1562:	80 91 d7 00 	lds	r24, 0x00D7
    1566:	81 30       	cpi	r24, 0x01	; 1
    1568:	89 f4       	brne	.+34     	; 0x158c <CheckIncrementSwitch+0xbc>
			{
				BounceDelay--;
    156a:	80 91 91 00 	lds	r24, 0x0091
    156e:	81 50       	subi	r24, 0x01	; 1
    1570:	80 93 91 00 	sts	0x0091, r24
				if( !BounceDelay )
    1574:	80 91 91 00 	lds	r24, 0x0091
    1578:	88 23       	and	r24, r24
    157a:	b1 f5       	brne	.+108    	; 0x15e8 <CheckIncrementSwitch+0x118>
				{
					press = 0 ;
    157c:	10 92 d8 00 	sts	0x00D8, r1
					hold = 0 ;
    1580:	10 92 d7 00 	sts	0x00D7, r1
					BounceDelay = BOUNCE_COUNTS ;
    1584:	85 e0       	ldi	r24, 0x05	; 5
    1586:	80 93 91 00 	sts	0x0091, r24
    158a:	2e c0       	rjmp	.+92     	; 0x15e8 <CheckIncrementSwitch+0x118>
				}
			}
			else if (	( Global_u8OperationMode == SETUP ) &&
    158c:	80 91 8b 00 	lds	r24, 0x008B
    1590:	89 30       	cpi	r24, 0x09	; 9
    1592:	51 f5       	brne	.+84     	; 0x15e8 <CheckIncrementSwitch+0x118>
    1594:	89 81       	ldd	r24, Y+1	; 0x01
    1596:	88 23       	and	r24, r24
    1598:	39 f5       	brne	.+78     	; 0x15e8 <CheckIncrementSwitch+0x118>
    159a:	80 91 d8 00 	lds	r24, 0x00D8
    159e:	88 23       	and	r24, r24
    15a0:	19 f5       	brne	.+70     	; 0x15e8 <CheckIncrementSwitch+0x118>
    15a2:	80 91 d7 00 	lds	r24, 0x00D7
    15a6:	88 23       	and	r24, r24
    15a8:	f9 f4       	brne	.+62     	; 0x15e8 <CheckIncrementSwitch+0x118>
						(Local_u8SwitchValue == DIO_u8LOW ) &&
						press == 0 		&&		hold == 0 ) // Unpress delay in Seup mode
			{
				SetupDelay--;
    15aa:	80 91 8f 00 	lds	r24, 0x008F
    15ae:	90 91 90 00 	lds	r25, 0x0090
    15b2:	01 97       	sbiw	r24, 0x01	; 1
    15b4:	90 93 90 00 	sts	0x0090, r25
    15b8:	80 93 8f 00 	sts	0x008F, r24
				if( !SetupDelay )
    15bc:	80 91 8f 00 	lds	r24, 0x008F
    15c0:	90 91 90 00 	lds	r25, 0x0090
    15c4:	00 97       	sbiw	r24, 0x00	; 0
    15c6:	81 f4       	brne	.+32     	; 0x15e8 <CheckIncrementSwitch+0x118>
				{
					Global_u8TrafficStatus = TRAFFIC_STOP ;
    15c8:	8c e0       	ldi	r24, 0x0C	; 12
    15ca:	80 93 8c 00 	sts	0x008C, r24
					Global_u8OperationMode = NORMAL ;
    15ce:	85 e0       	ldi	r24, 0x05	; 5
    15d0:	80 93 8b 00 	sts	0x008B, r24
					Global_u8CounterValue = Global_u8CounterMaxValue ;
    15d4:	80 91 8d 00 	lds	r24, 0x008D
    15d8:	80 93 8e 00 	sts	0x008E, r24
					SetupDelay = SETUP_COUNTS ;
    15dc:	82 e3       	ldi	r24, 0x32	; 50
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	90 93 90 00 	sts	0x0090, r25
    15e4:	80 93 8f 00 	sts	0x008F, r24
				}
			}

		}
}
    15e8:	0f 90       	pop	r0
    15ea:	0f 90       	pop	r0
    15ec:	0f 90       	pop	r0
    15ee:	cf 91       	pop	r28
    15f0:	df 91       	pop	r29
    15f2:	08 95       	ret

000015f4 <CheckDecrementSwitch>:
void CheckDecrementSwitch(void*p)
{
    15f4:	df 93       	push	r29
    15f6:	cf 93       	push	r28
    15f8:	00 d0       	rcall	.+0      	; 0x15fa <CheckDecrementSwitch+0x6>
    15fa:	0f 92       	push	r0
    15fc:	cd b7       	in	r28, 0x3d	; 61
    15fe:	de b7       	in	r29, 0x3e	; 62
    1600:	9b 83       	std	Y+3, r25	; 0x03
    1602:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8SwitchValue;

	if( ES_OK == Switch_enuGetPressed( DEC_SW , &Local_u8SwitchValue ) )
    1604:	8b ec       	ldi	r24, 0xCB	; 203
    1606:	9e 01       	movw	r18, r28
    1608:	2f 5f       	subi	r18, 0xFF	; 255
    160a:	3f 4f       	sbci	r19, 0xFF	; 255
    160c:	b9 01       	movw	r22, r18
    160e:	0e 94 b8 00 	call	0x170	; 0x170 <Switch_enuGetPressed>
    1612:	88 23       	and	r24, r24
    1614:	09 f0       	breq	.+2      	; 0x1618 <CheckDecrementSwitch+0x24>
    1616:	7a c0       	rjmp	.+244    	; 0x170c <CheckDecrementSwitch+0x118>
	{
		static u8 press = 0, hold = 0 , BounceDelay = BOUNCE_COUNTS ;
		static u16 SetupDelay = SETUP_COUNTS ;
		if ( (Local_u8SwitchValue == DIO_u8HIGH ) && press == 0 && hold == 0 )  //First press
    1618:	89 81       	ldd	r24, Y+1	; 0x01
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	f1 f4       	brne	.+60     	; 0x165a <CheckDecrementSwitch+0x66>
    161e:	80 91 da 00 	lds	r24, 0x00DA
    1622:	88 23       	and	r24, r24
    1624:	d1 f4       	brne	.+52     	; 0x165a <CheckDecrementSwitch+0x66>
    1626:	80 91 d9 00 	lds	r24, 0x00D9
    162a:	88 23       	and	r24, r24
    162c:	b1 f4       	brne	.+44     	; 0x165a <CheckDecrementSwitch+0x66>
		{
			if( Global_u8OperationMode == NORMAL )
    162e:	80 91 8b 00 	lds	r24, 0x008B
    1632:	85 30       	cpi	r24, 0x05	; 5
    1634:	21 f4       	brne	.+8      	; 0x163e <CheckDecrementSwitch+0x4a>
			{
				Global_u8OperationMode = SETUP ;
    1636:	89 e0       	ldi	r24, 0x09	; 9
    1638:	80 93 8b 00 	sts	0x008B, r24
    163c:	67 c0       	rjmp	.+206    	; 0x170c <CheckDecrementSwitch+0x118>
			}
			else
			{
				if( Global_u8CounterMaxValue > COUNTER_MIN_LIMIT )
    163e:	80 91 8d 00 	lds	r24, 0x008D
    1642:	85 31       	cpi	r24, 0x15	; 21
    1644:	08 f4       	brcc	.+2      	; 0x1648 <CheckDecrementSwitch+0x54>
    1646:	62 c0       	rjmp	.+196    	; 0x170c <CheckDecrementSwitch+0x118>
				{
					Global_u8CounterMaxValue--;
    1648:	80 91 8d 00 	lds	r24, 0x008D
    164c:	81 50       	subi	r24, 0x01	; 1
    164e:	80 93 8d 00 	sts	0x008D, r24
					press = 1 ;
    1652:	81 e0       	ldi	r24, 0x01	; 1
    1654:	80 93 da 00 	sts	0x00DA, r24
    1658:	59 c0       	rjmp	.+178    	; 0x170c <CheckDecrementSwitch+0x118>
				}
			}
		}
		else if ( (Local_u8SwitchValue == DIO_u8HIGH ) && press == 1 && hold == 0 ) //continued first press
    165a:	89 81       	ldd	r24, Y+1	; 0x01
    165c:	81 30       	cpi	r24, 0x01	; 1
    165e:	61 f4       	brne	.+24     	; 0x1678 <CheckDecrementSwitch+0x84>
    1660:	80 91 da 00 	lds	r24, 0x00DA
    1664:	81 30       	cpi	r24, 0x01	; 1
    1666:	41 f4       	brne	.+16     	; 0x1678 <CheckDecrementSwitch+0x84>
    1668:	80 91 d9 00 	lds	r24, 0x00D9
    166c:	88 23       	and	r24, r24
    166e:	21 f4       	brne	.+8      	; 0x1678 <CheckDecrementSwitch+0x84>
		{
			hold = 1;
    1670:	81 e0       	ldi	r24, 0x01	; 1
    1672:	80 93 d9 00 	sts	0x00D9, r24
    1676:	4a c0       	rjmp	.+148    	; 0x170c <CheckDecrementSwitch+0x118>
		}
		else if ( (Local_u8SwitchValue== DIO_u8LOW ) && press == 1 && hold == 1 ) // removed first press
    1678:	89 81       	ldd	r24, Y+1	; 0x01
    167a:	88 23       	and	r24, r24
    167c:	c9 f4       	brne	.+50     	; 0x16b0 <CheckDecrementSwitch+0xbc>
    167e:	80 91 da 00 	lds	r24, 0x00DA
    1682:	81 30       	cpi	r24, 0x01	; 1
    1684:	a9 f4       	brne	.+42     	; 0x16b0 <CheckDecrementSwitch+0xbc>
    1686:	80 91 d9 00 	lds	r24, 0x00D9
    168a:	81 30       	cpi	r24, 0x01	; 1
    168c:	89 f4       	brne	.+34     	; 0x16b0 <CheckDecrementSwitch+0xbc>
		{
			BounceDelay--;
    168e:	80 91 94 00 	lds	r24, 0x0094
    1692:	81 50       	subi	r24, 0x01	; 1
    1694:	80 93 94 00 	sts	0x0094, r24
			if( !BounceDelay )
    1698:	80 91 94 00 	lds	r24, 0x0094
    169c:	88 23       	and	r24, r24
    169e:	b1 f5       	brne	.+108    	; 0x170c <CheckDecrementSwitch+0x118>
			{
				press = 0 ;
    16a0:	10 92 da 00 	sts	0x00DA, r1
				hold = 0 ;
    16a4:	10 92 d9 00 	sts	0x00D9, r1
				BounceDelay = BOUNCE_COUNTS ;
    16a8:	85 e0       	ldi	r24, 0x05	; 5
    16aa:	80 93 94 00 	sts	0x0094, r24
    16ae:	2e c0       	rjmp	.+92     	; 0x170c <CheckDecrementSwitch+0x118>
			}
		}
		else if (	( Global_u8OperationMode == SETUP ) &&
    16b0:	80 91 8b 00 	lds	r24, 0x008B
    16b4:	89 30       	cpi	r24, 0x09	; 9
    16b6:	51 f5       	brne	.+84     	; 0x170c <CheckDecrementSwitch+0x118>
    16b8:	89 81       	ldd	r24, Y+1	; 0x01
    16ba:	88 23       	and	r24, r24
    16bc:	39 f5       	brne	.+78     	; 0x170c <CheckDecrementSwitch+0x118>
    16be:	80 91 da 00 	lds	r24, 0x00DA
    16c2:	88 23       	and	r24, r24
    16c4:	19 f5       	brne	.+70     	; 0x170c <CheckDecrementSwitch+0x118>
    16c6:	80 91 d9 00 	lds	r24, 0x00D9
    16ca:	88 23       	and	r24, r24
    16cc:	f9 f4       	brne	.+62     	; 0x170c <CheckDecrementSwitch+0x118>
					(Local_u8SwitchValue == DIO_u8LOW ) &&
					press == 0 		&&		hold == 0 ) // Unpress delay in Setup mode
		{
			SetupDelay--;
    16ce:	80 91 92 00 	lds	r24, 0x0092
    16d2:	90 91 93 00 	lds	r25, 0x0093
    16d6:	01 97       	sbiw	r24, 0x01	; 1
    16d8:	90 93 93 00 	sts	0x0093, r25
    16dc:	80 93 92 00 	sts	0x0092, r24
			if( !SetupDelay )
    16e0:	80 91 92 00 	lds	r24, 0x0092
    16e4:	90 91 93 00 	lds	r25, 0x0093
    16e8:	00 97       	sbiw	r24, 0x00	; 0
    16ea:	81 f4       	brne	.+32     	; 0x170c <CheckDecrementSwitch+0x118>
			{
				Global_u8TrafficStatus = TRAFFIC_STOP ;
    16ec:	8c e0       	ldi	r24, 0x0C	; 12
    16ee:	80 93 8c 00 	sts	0x008C, r24
				Global_u8OperationMode = NORMAL ;
    16f2:	85 e0       	ldi	r24, 0x05	; 5
    16f4:	80 93 8b 00 	sts	0x008B, r24
				Global_u8CounterValue = Global_u8CounterMaxValue ;
    16f8:	80 91 8d 00 	lds	r24, 0x008D
    16fc:	80 93 8e 00 	sts	0x008E, r24
				SetupDelay = SETUP_COUNTS ;
    1700:	82 e3       	ldi	r24, 0x32	; 50
    1702:	90 e0       	ldi	r25, 0x00	; 0
    1704:	90 93 93 00 	sts	0x0093, r25
    1708:	80 93 92 00 	sts	0x0092, r24
			}
		}

	}
}
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	0f 90       	pop	r0
    1712:	cf 91       	pop	r28
    1714:	df 91       	pop	r29
    1716:	08 95       	ret

00001718 <DisplayCounter>:
void DisplayCounter(void *p)
{
    1718:	df 93       	push	r29
    171a:	cf 93       	push	r28
    171c:	00 d0       	rcall	.+0      	; 0x171e <DisplayCounter+0x6>
    171e:	00 d0       	rcall	.+0      	; 0x1720 <DisplayCounter+0x8>
    1720:	0f 92       	push	r0
    1722:	cd b7       	in	r28, 0x3d	; 61
    1724:	de b7       	in	r29, 0x3e	; 62
    1726:	9d 83       	std	Y+5, r25	; 0x05
    1728:	8c 83       	std	Y+4, r24	; 0x04
	u8 *Local_u8ActiveModule = (u8*)p ;
    172a:	8c 81       	ldd	r24, Y+4	; 0x04
    172c:	9d 81       	ldd	r25, Y+5	; 0x05
    172e:	9b 83       	std	Y+3, r25	; 0x03
    1730:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8DisplayValue;

	if( Global_u8OperationMode == NORMAL )
    1732:	80 91 8b 00 	lds	r24, 0x008B
    1736:	85 30       	cpi	r24, 0x05	; 5
    1738:	21 f4       	brne	.+8      	; 0x1742 <DisplayCounter+0x2a>
	{
		Local_u8DisplayValue = Global_u8CounterValue ;
    173a:	80 91 8e 00 	lds	r24, 0x008E
    173e:	89 83       	std	Y+1, r24	; 0x01
    1740:	03 c0       	rjmp	.+6      	; 0x1748 <DisplayCounter+0x30>
	}
	else
	{
		Local_u8DisplayValue = Global_u8CounterMaxValue ;
    1742:	80 91 8d 00 	lds	r24, 0x008D
    1746:	89 83       	std	Y+1, r24	; 0x01
	}

	if( *Local_u8ActiveModule == COUNTER_UNITS )
    1748:	ea 81       	ldd	r30, Y+2	; 0x02
    174a:	fb 81       	ldd	r31, Y+3	; 0x03
    174c:	80 81       	ld	r24, Z
    174e:	8c 30       	cpi	r24, 0x0C	; 12
    1750:	c1 f4       	brne	.+48     	; 0x1782 <DisplayCounter+0x6a>
	{
		SevSeg_enuModuleControl( COUNTER_TENS , MODULE_DISABLE);
    1752:	8b e0       	ldi	r24, 0x0B	; 11
    1754:	6d e0       	ldi	r22, 0x0D	; 13
    1756:	0e 94 1a 03 	call	0x634	; 0x634 <SevSeg_enuModuleControl>
		SevSeg_enuSetDigitValue( COUNTER_UNITS , ( Local_u8DisplayValue % 10 ) );
    175a:	89 81       	ldd	r24, Y+1	; 0x01
    175c:	9a e0       	ldi	r25, 0x0A	; 10
    175e:	69 2f       	mov	r22, r25
    1760:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__udivmodqi4>
    1764:	89 2f       	mov	r24, r25
    1766:	98 2f       	mov	r25, r24
    1768:	8c e0       	ldi	r24, 0x0C	; 12
    176a:	69 2f       	mov	r22, r25
    176c:	0e 94 24 02 	call	0x448	; 0x448 <SevSeg_enuSetDigitValue>
		SevSeg_enuModuleControl( COUNTER_UNITS , MODULE_ENABLE);
    1770:	8c e0       	ldi	r24, 0x0C	; 12
    1772:	6e e0       	ldi	r22, 0x0E	; 14
    1774:	0e 94 1a 03 	call	0x634	; 0x634 <SevSeg_enuModuleControl>
		*Local_u8ActiveModule = COUNTER_TENS ;
    1778:	ea 81       	ldd	r30, Y+2	; 0x02
    177a:	fb 81       	ldd	r31, Y+3	; 0x03
    177c:	8b e0       	ldi	r24, 0x0B	; 11
    177e:	80 83       	st	Z, r24
    1780:	16 c0       	rjmp	.+44     	; 0x17ae <DisplayCounter+0x96>
	}
	else
	{
		SevSeg_enuModuleControl( COUNTER_UNITS , MODULE_DISABLE);
    1782:	8c e0       	ldi	r24, 0x0C	; 12
    1784:	6d e0       	ldi	r22, 0x0D	; 13
    1786:	0e 94 1a 03 	call	0x634	; 0x634 <SevSeg_enuModuleControl>
		SevSeg_enuSetDigitValue( COUNTER_TENS , ( Local_u8DisplayValue / 10 ) );
    178a:	89 81       	ldd	r24, Y+1	; 0x01
    178c:	9a e0       	ldi	r25, 0x0A	; 10
    178e:	69 2f       	mov	r22, r25
    1790:	0e 94 51 0c 	call	0x18a2	; 0x18a2 <__udivmodqi4>
    1794:	98 2f       	mov	r25, r24
    1796:	8b e0       	ldi	r24, 0x0B	; 11
    1798:	69 2f       	mov	r22, r25
    179a:	0e 94 24 02 	call	0x448	; 0x448 <SevSeg_enuSetDigitValue>
		SevSeg_enuModuleControl( COUNTER_TENS , MODULE_ENABLE);
    179e:	8b e0       	ldi	r24, 0x0B	; 11
    17a0:	6e e0       	ldi	r22, 0x0E	; 14
    17a2:	0e 94 1a 03 	call	0x634	; 0x634 <SevSeg_enuModuleControl>
		*Local_u8ActiveModule = COUNTER_UNITS ;
    17a6:	ea 81       	ldd	r30, Y+2	; 0x02
    17a8:	fb 81       	ldd	r31, Y+3	; 0x03
    17aa:	8c e0       	ldi	r24, 0x0C	; 12
    17ac:	80 83       	st	Z, r24
	}
}
    17ae:	0f 90       	pop	r0
    17b0:	0f 90       	pop	r0
    17b2:	0f 90       	pop	r0
    17b4:	0f 90       	pop	r0
    17b6:	0f 90       	pop	r0
    17b8:	cf 91       	pop	r28
    17ba:	df 91       	pop	r29
    17bc:	08 95       	ret

000017be <RedLampStatus>:
void RedLampStatus(void*p)
{
    17be:	df 93       	push	r29
    17c0:	cf 93       	push	r28
    17c2:	00 d0       	rcall	.+0      	; 0x17c4 <RedLampStatus+0x6>
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <RedLampStatus+0x8>
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	9c 83       	std	Y+4, r25	; 0x04
    17cc:	8b 83       	std	Y+3, r24	; 0x03
	static u8 Local_u8PrevStatus = LD_u8OFF ;

	u8 *LampStatus = p ;
    17ce:	8b 81       	ldd	r24, Y+3	; 0x03
    17d0:	9c 81       	ldd	r25, Y+4	; 0x04
    17d2:	9a 83       	std	Y+2, r25	; 0x02
    17d4:	89 83       	std	Y+1, r24	; 0x01

	if( *LampStatus != Local_u8PrevStatus)
    17d6:	e9 81       	ldd	r30, Y+1	; 0x01
    17d8:	fa 81       	ldd	r31, Y+2	; 0x02
    17da:	90 81       	ld	r25, Z
    17dc:	80 91 db 00 	lds	r24, 0x00DB
    17e0:	98 17       	cp	r25, r24
    17e2:	61 f0       	breq	.+24     	; 0x17fc <RedLampStatus+0x3e>
	{
		LD_enuSetState( RED_LD , *LampStatus );
    17e4:	e9 81       	ldd	r30, Y+1	; 0x01
    17e6:	fa 81       	ldd	r31, Y+2	; 0x02
    17e8:	90 81       	ld	r25, Z
    17ea:	8e e1       	ldi	r24, 0x1E	; 30
    17ec:	69 2f       	mov	r22, r25
    17ee:	0e 94 c8 03 	call	0x790	; 0x790 <LD_enuSetState>
		Local_u8PrevStatus = *LampStatus ;
    17f2:	e9 81       	ldd	r30, Y+1	; 0x01
    17f4:	fa 81       	ldd	r31, Y+2	; 0x02
    17f6:	80 81       	ld	r24, Z
    17f8:	80 93 db 00 	sts	0x00DB, r24
	}
}
    17fc:	0f 90       	pop	r0
    17fe:	0f 90       	pop	r0
    1800:	0f 90       	pop	r0
    1802:	0f 90       	pop	r0
    1804:	cf 91       	pop	r28
    1806:	df 91       	pop	r29
    1808:	08 95       	ret

0000180a <YellowLampStatus>:
void YellowLampStatus(void*p)
{
    180a:	df 93       	push	r29
    180c:	cf 93       	push	r28
    180e:	00 d0       	rcall	.+0      	; 0x1810 <YellowLampStatus+0x6>
    1810:	00 d0       	rcall	.+0      	; 0x1812 <YellowLampStatus+0x8>
    1812:	cd b7       	in	r28, 0x3d	; 61
    1814:	de b7       	in	r29, 0x3e	; 62
    1816:	9c 83       	std	Y+4, r25	; 0x04
    1818:	8b 83       	std	Y+3, r24	; 0x03
	static u8 Local_u8PrevStatus = LD_u8OFF ;

	u8 *LampStatus = p ;
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	9c 81       	ldd	r25, Y+4	; 0x04
    181e:	9a 83       	std	Y+2, r25	; 0x02
    1820:	89 83       	std	Y+1, r24	; 0x01

	if( *LampStatus != Local_u8PrevStatus)
    1822:	e9 81       	ldd	r30, Y+1	; 0x01
    1824:	fa 81       	ldd	r31, Y+2	; 0x02
    1826:	90 81       	ld	r25, Z
    1828:	80 91 dc 00 	lds	r24, 0x00DC
    182c:	98 17       	cp	r25, r24
    182e:	61 f0       	breq	.+24     	; 0x1848 <YellowLampStatus+0x3e>
	{
		LD_enuSetState( YLW_LD , *LampStatus );
    1830:	e9 81       	ldd	r30, Y+1	; 0x01
    1832:	fa 81       	ldd	r31, Y+2	; 0x02
    1834:	90 81       	ld	r25, Z
    1836:	8f e1       	ldi	r24, 0x1F	; 31
    1838:	69 2f       	mov	r22, r25
    183a:	0e 94 c8 03 	call	0x790	; 0x790 <LD_enuSetState>
		Local_u8PrevStatus = *LampStatus ;
    183e:	e9 81       	ldd	r30, Y+1	; 0x01
    1840:	fa 81       	ldd	r31, Y+2	; 0x02
    1842:	80 81       	ld	r24, Z
    1844:	80 93 dc 00 	sts	0x00DC, r24
	}
}
    1848:	0f 90       	pop	r0
    184a:	0f 90       	pop	r0
    184c:	0f 90       	pop	r0
    184e:	0f 90       	pop	r0
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	08 95       	ret

00001856 <GreenLampStatus>:
void GreenLampStatus(void*p)
{
    1856:	df 93       	push	r29
    1858:	cf 93       	push	r28
    185a:	00 d0       	rcall	.+0      	; 0x185c <GreenLampStatus+0x6>
    185c:	00 d0       	rcall	.+0      	; 0x185e <GreenLampStatus+0x8>
    185e:	cd b7       	in	r28, 0x3d	; 61
    1860:	de b7       	in	r29, 0x3e	; 62
    1862:	9c 83       	std	Y+4, r25	; 0x04
    1864:	8b 83       	std	Y+3, r24	; 0x03
	static u8 Local_u8PrevStatus = LD_u8OFF ;

	u8 *LampStatus = p ;
    1866:	8b 81       	ldd	r24, Y+3	; 0x03
    1868:	9c 81       	ldd	r25, Y+4	; 0x04
    186a:	9a 83       	std	Y+2, r25	; 0x02
    186c:	89 83       	std	Y+1, r24	; 0x01

	if( *LampStatus != Local_u8PrevStatus)
    186e:	e9 81       	ldd	r30, Y+1	; 0x01
    1870:	fa 81       	ldd	r31, Y+2	; 0x02
    1872:	90 81       	ld	r25, Z
    1874:	80 91 dd 00 	lds	r24, 0x00DD
    1878:	98 17       	cp	r25, r24
    187a:	61 f0       	breq	.+24     	; 0x1894 <GreenLampStatus+0x3e>
	{
		LD_enuSetState( GRN_LD , *LampStatus );
    187c:	e9 81       	ldd	r30, Y+1	; 0x01
    187e:	fa 81       	ldd	r31, Y+2	; 0x02
    1880:	90 81       	ld	r25, Z
    1882:	80 e2       	ldi	r24, 0x20	; 32
    1884:	69 2f       	mov	r22, r25
    1886:	0e 94 c8 03 	call	0x790	; 0x790 <LD_enuSetState>
		Local_u8PrevStatus = *LampStatus ;
    188a:	e9 81       	ldd	r30, Y+1	; 0x01
    188c:	fa 81       	ldd	r31, Y+2	; 0x02
    188e:	80 81       	ld	r24, Z
    1890:	80 93 dd 00 	sts	0x00DD, r24
	}
}
    1894:	0f 90       	pop	r0
    1896:	0f 90       	pop	r0
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	cf 91       	pop	r28
    189e:	df 91       	pop	r29
    18a0:	08 95       	ret

000018a2 <__udivmodqi4>:
    18a2:	99 1b       	sub	r25, r25
    18a4:	79 e0       	ldi	r23, 0x09	; 9
    18a6:	04 c0       	rjmp	.+8      	; 0x18b0 <__udivmodqi4_ep>

000018a8 <__udivmodqi4_loop>:
    18a8:	99 1f       	adc	r25, r25
    18aa:	96 17       	cp	r25, r22
    18ac:	08 f0       	brcs	.+2      	; 0x18b0 <__udivmodqi4_ep>
    18ae:	96 1b       	sub	r25, r22

000018b0 <__udivmodqi4_ep>:
    18b0:	88 1f       	adc	r24, r24
    18b2:	7a 95       	dec	r23
    18b4:	c9 f7       	brne	.-14     	; 0x18a8 <__udivmodqi4_loop>
    18b6:	80 95       	com	r24
    18b8:	08 95       	ret

000018ba <__divmodhi4>:
    18ba:	97 fb       	bst	r25, 7
    18bc:	09 2e       	mov	r0, r25
    18be:	07 26       	eor	r0, r23
    18c0:	0a d0       	rcall	.+20     	; 0x18d6 <__divmodhi4_neg1>
    18c2:	77 fd       	sbrc	r23, 7
    18c4:	04 d0       	rcall	.+8      	; 0x18ce <__divmodhi4_neg2>
    18c6:	2e d0       	rcall	.+92     	; 0x1924 <__udivmodhi4>
    18c8:	06 d0       	rcall	.+12     	; 0x18d6 <__divmodhi4_neg1>
    18ca:	00 20       	and	r0, r0
    18cc:	1a f4       	brpl	.+6      	; 0x18d4 <__divmodhi4_exit>

000018ce <__divmodhi4_neg2>:
    18ce:	70 95       	com	r23
    18d0:	61 95       	neg	r22
    18d2:	7f 4f       	sbci	r23, 0xFF	; 255

000018d4 <__divmodhi4_exit>:
    18d4:	08 95       	ret

000018d6 <__divmodhi4_neg1>:
    18d6:	f6 f7       	brtc	.-4      	; 0x18d4 <__divmodhi4_exit>
    18d8:	90 95       	com	r25
    18da:	81 95       	neg	r24
    18dc:	9f 4f       	sbci	r25, 0xFF	; 255
    18de:	08 95       	ret

000018e0 <__udivmodsi4>:
    18e0:	a1 e2       	ldi	r26, 0x21	; 33
    18e2:	1a 2e       	mov	r1, r26
    18e4:	aa 1b       	sub	r26, r26
    18e6:	bb 1b       	sub	r27, r27
    18e8:	fd 01       	movw	r30, r26
    18ea:	0d c0       	rjmp	.+26     	; 0x1906 <__udivmodsi4_ep>

000018ec <__udivmodsi4_loop>:
    18ec:	aa 1f       	adc	r26, r26
    18ee:	bb 1f       	adc	r27, r27
    18f0:	ee 1f       	adc	r30, r30
    18f2:	ff 1f       	adc	r31, r31
    18f4:	a2 17       	cp	r26, r18
    18f6:	b3 07       	cpc	r27, r19
    18f8:	e4 07       	cpc	r30, r20
    18fa:	f5 07       	cpc	r31, r21
    18fc:	20 f0       	brcs	.+8      	; 0x1906 <__udivmodsi4_ep>
    18fe:	a2 1b       	sub	r26, r18
    1900:	b3 0b       	sbc	r27, r19
    1902:	e4 0b       	sbc	r30, r20
    1904:	f5 0b       	sbc	r31, r21

00001906 <__udivmodsi4_ep>:
    1906:	66 1f       	adc	r22, r22
    1908:	77 1f       	adc	r23, r23
    190a:	88 1f       	adc	r24, r24
    190c:	99 1f       	adc	r25, r25
    190e:	1a 94       	dec	r1
    1910:	69 f7       	brne	.-38     	; 0x18ec <__udivmodsi4_loop>
    1912:	60 95       	com	r22
    1914:	70 95       	com	r23
    1916:	80 95       	com	r24
    1918:	90 95       	com	r25
    191a:	9b 01       	movw	r18, r22
    191c:	ac 01       	movw	r20, r24
    191e:	bd 01       	movw	r22, r26
    1920:	cf 01       	movw	r24, r30
    1922:	08 95       	ret

00001924 <__udivmodhi4>:
    1924:	aa 1b       	sub	r26, r26
    1926:	bb 1b       	sub	r27, r27
    1928:	51 e1       	ldi	r21, 0x11	; 17
    192a:	07 c0       	rjmp	.+14     	; 0x193a <__udivmodhi4_ep>

0000192c <__udivmodhi4_loop>:
    192c:	aa 1f       	adc	r26, r26
    192e:	bb 1f       	adc	r27, r27
    1930:	a6 17       	cp	r26, r22
    1932:	b7 07       	cpc	r27, r23
    1934:	10 f0       	brcs	.+4      	; 0x193a <__udivmodhi4_ep>
    1936:	a6 1b       	sub	r26, r22
    1938:	b7 0b       	sbc	r27, r23

0000193a <__udivmodhi4_ep>:
    193a:	88 1f       	adc	r24, r24
    193c:	99 1f       	adc	r25, r25
    193e:	5a 95       	dec	r21
    1940:	a9 f7       	brne	.-22     	; 0x192c <__udivmodhi4_loop>
    1942:	80 95       	com	r24
    1944:	90 95       	com	r25
    1946:	bc 01       	movw	r22, r24
    1948:	cd 01       	movw	r24, r26
    194a:	08 95       	ret

0000194c <_exit>:
    194c:	f8 94       	cli

0000194e <__stop_program>:
    194e:	ff cf       	rjmp	.-2      	; 0x194e <__stop_program>
